<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术学派</title>
  
  <subtitle>学习，因为我还有梦想。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.JiShuXuePai.com/"/>
  <updated>2018-06-01T07:45:45.000Z</updated>
  <id>http://www.JiShuXuePai.com/</id>
  
  <author>
    <name>技术学派</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初次求职的程序员该如何准备简历？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%88%9D%E6%AC%A1%E6%B1%82%E8%81%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E8%AF%A5%E5%A6%82%E4%BD%95%E5%87%86%E5%A4%87%E7%AE%80%E5%8E%86%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/初次求职的程序员该如何准备简历？/</id>
    <published>2018-06-01T07:33:54.198Z</published>
    <updated>2018-06-01T07:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么看上去差不多的技术和资历，有的人可以一个月收到二三十个offer，有的人只有寥寥几个？</p><img src="/blog/学习答疑/学习答疑/初次求职的程序员该如何准备简历？/01.jpg" title="Markdown 语法"><p>今天技术学派为大家分享一下程序员的简历该如何准备。通常HR在筛选简历时主要从公司需求出发，重点不一，不过还是有很多“通用”的套路，为了在30秒内判断出这份简历是否值得跟进，我认为程序员写简历的正确姿势是这样的：</p><h3 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h3><p>HR打开简历之后的第一印象很重要，就好比我们看见一个人，会有一个整体的感觉，他是时尚的、小清新的还是老油条？当有了第一印象之后再慢慢分解来看。</p><p><img src="02.jpg" alt=""></p><p>首先我们的简历风格上要简洁明了，逻辑结构清晰。字体的排版，顺畅、清晰整齐就好。最好是PDF格式，兼容性强且不易乱序。如果可以Markdown格式更好了。</p><p><strong>禁忌：</strong></p><ul><li>设计的过于浮夸或者过于简单的。写了十几页，半天都打不开或者加载了半天，打开还乱码。</li><li>简历弄的五颜六色、非常酷炫，却半天找不到联系方式，或是只有个人基本信息和公司名称。</li></ul><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>基本信息要全：姓名、性别、电话、微信（以防有时候电话打不通哦，时不时会遇到这种情况）、毕业院校、邮箱</p><p><strong>禁忌：</strong></p><ul><li>大部分的基本信息没有写。</li><li>只写了一个Github链接，极致简洁的几句描述，需要通过你的链接来找你的联系方式。</li></ul><h3 id="工作经历-amp-项目经历"><a href="#工作经历-amp-项目经历" class="headerlink" title="工作经历&amp;项目经历"></a>工作经历&amp;项目经历</h3><ul><li><p>效力过哪些公司，在公司的职位</p></li><li><p>擅长的技术语言，应用了哪些技术栈，（Java, PHP，JavaScript, React, Vue, Python…）</p></li><li><p>经历的项目复杂度，及在项目中承担什么样的角色</p></li><li><p>时间节点（尽量不要有空档期）</p></li></ul><p><img src="03.jpg" alt=""></p><p><strong>列子1：</strong></p><p>北京XXX公司 Java工程师 — 2015.2月-2018.5月</p><p>1.MOGU推荐架构数据与缓存层设计开发</p><ul><li>MOGU是一款时尚资讯app,负责推荐页面资讯feed流的展示及用户历史的展示</li><li>负责数据层,处理前端逻辑整个开发工作,分布式rpc服务搭建</li><li>负责进行压测监测、缓存处理,对接又进行改进优化,主用redis缓存</li></ul><p>2.基于Java的电商爬虫开发</p><ul><li>使用java搭建爬虫server平台,进行配置和开发,进行网页改版监测功能开发</li><li>爬取淘宝时尚品牌与其他电商网站商品品牌与详情等</li><li>通过频率、ip池、匿名代理等应对一些网站的反爬</li></ul><p>3.同图搜索Solr服务开发</p><ul><li>基于算法组的同图策略,使用solr做java接又实现rpc服务搭建,进行索引构建和solr实现</li></ul><p><strong>列子2：</strong></p><p>XX公司（全栈工程师）2013.06 — 至今</p><ul><li>参与需求分析及实现方案设计。</li><li>设计数据库表结构，实现后台功能及web页面展示。</li><li>产品线上部署及运维。</li></ul><p>ay 配置管理工程师 2010.03 — 2013.03</p><ul><li><p>负责公司产品性能测试，及线上数据分析</p></li><li><p>负责公司配置管理，环境维护等工作</p></li></ul><p><strong>总结：大家会发现在例子2中，完全看不出来他工作的具体内容，没有逻辑性，甚至不知道他做的什么技术语言。</strong></p><h3 id="工作期望-amp-个人评价"><a href="#工作期望-amp-个人评价" class="headerlink" title="工作期望&amp;个人评价"></a>工作期望&amp;个人评价</h3><p>如果写了个人评价一定要对自己有一个全方位的一个描述总结，让别人更好的解读你。或者在此处，你的优点特长有哪些。即使不写个人评价，也一定记得写上工作期望。</p><p>下面给大家举2个例子大家看一下哪个好？</p><p><strong>例子1：</strong></p><ul><li>为人性格,诚实谦虚，勤奋，能吃苦耐劳，有耐心，有团队意识，能和同学和谐相处，能虚心接受别人的建议的人。</li><li>责任心强，善于沟通，具有良好的团队合作精神；专业扎实，具有较强的钻研精神和学习能力；性格比较乐观外向，喜欢打羽毛球。</li></ul><p><strong>例子2:</strong></p><p>极客、热爱技术、热爱开源</p><ul><li>Ruby on Rails：精通</li><li>Agile/Lean：精通</li><li>ReactJS：掌握</li><li>Docker：掌握</li><li>AWS：掌握</li></ul><p>大家感觉哪个看起来更直观一些呢。虽然第一个例子写的很多，但完全看不出个性特点，写和没写没区别并不大。</p><h3 id="是否有博客，个人技术栈点等"><a href="#是否有博客，个人技术栈点等" class="headerlink" title="是否有博客，个人技术栈点等"></a>是否有博客，个人技术栈点等</h3><ol><li>看到有这项的HR两眼已经放光了，加分项，说明你真正的热爱技术，善于学习总结，乐于分享，且有投入自己的业余时间到软件事业中。</li><li>我喜欢的社区: 图灵社区，知乎，博客园，Stack Over flow，Google Developer Group等；</li><li>我的博客链接、个人作品链接如下:<ul><li><a href="https://github.com/github" target="_blank" rel="noopener">https://github.com/github</a></li><li><a href="http://www.oschina.net/" target="_blank" rel="noopener">http://www.oschina.net/</a></li><li><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">https://www.cnblogs.com/</a></li></ul></li></ol><p><strong>总结</strong></p><ul><li>明白了简历上基本的原则，在写简历的时候切记，所有内容都指向一件事：我可以胜任这个职位。怎么能证明自己的胜任能力，怎么来。</li><li>可以多看几家公司的招聘要求，比较找到共性之处，就是你简历必须有的内容！不要想着自己有什么，要知道人家要什么，尽量往需求上靠！</li><li>个人评价中，不要写套话，要突出自己的与众不同之处，或者至少表达自己对这个职位或互联网行业的热爱。</li></ul><p><strong>想了解更多编程内容，请关注技术学派。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么看上去差不多的技术和资历，有的人可以一个月收到二三十个offer，有的人只有寥寥几个？&lt;/p&gt;&lt;img src=&quot;/blog/学习答疑/学习答疑/初次求职的程序员该如何准备简历？/01.jpg&quot; title=&quot;Markdown 语法&quot;&gt;&lt;p&gt;今天技术学派为大家分享一下
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习和人工智能的区别你真的知道嘛？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%9F%A5%E9%81%93%E5%98%9B%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/机器学习和人工智能的区别你真的知道嘛？/</id>
    <published>2018-06-01T05:43:06.839Z</published>
    <updated>2018-06-01T06:00:35.162Z</updated>
    
    <content type="html"><![CDATA[<p>大家现在经常会听到别人提起人工智能、机器学习和深度学习。怎样才可以正确的使用这些词呢？他们的区别是什么呢？</p><p>机器学习算法是人工智能背后的推动力量，所有机器学习算法中最关键的是深度学习。</p><p><strong>简单来说，人工智能、机器学习和深度学习都是属于一个领域的一个子集。但是人工智能是机器学习的首要范畴，机器学习是深度学习的首要范畴。</strong></p><img src="/blog/学习答疑/学习答疑/机器学习和人工智能的区别你真的知道嘛？/01.jpg" title="Markdown 语法"><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>人工智能是研究让计算机来模拟人的思维过程和智能行为（比如：学习、推理、思考、规划等）的学科，主要包括计算机实现智能的原理、制造类似于人脑智能的计算机，使计算机能实现更高层次的应用。人工智能将涉及到计算机科学、心理学、哲学等学科。可以说几乎是自然科学和社会科学的所有学科。从思维观点上看，人工智能不仅限于逻辑思维，要考虑形象思维和灵感思维才能促进人工智能的突破性的发展。数学常被认为是多种学科的基础科学，数学也进入语言、思维领域，人工智能学科也必须借用数学工具，数学不仅在标准逻辑、模糊数学等范围发挥作用，数学进入人工智能学科，它们将互相促进而更快地发展。</p><p><img src="02.jpg" alt=""></p><p>机器学习和人工智能的区别你真的知道嘛？</p><p><strong>人工智能的领域：</strong></p><ul><li>机器学习：人工智能的领域，使计算机不用明确编程就可以学习。</li><li>搜索及优化：算法，如梯度下降迭代搜索局部最大值或最小值。</li><li>逻辑推理：人工智能中逻辑推理的例子是模拟人类专家决策能力的专家计算机系统。</li><li>概率推理：将概率论的能力去处理不确定性和演绎逻辑的能力来利用形式论证的结构结合起来。其结果是一个更丰富和更具表现力的形式主义与更广泛应用领域。</li><li>控制理论：一种正式的方法来找到具有可证性的控制器。这通常涉及描述像机器人或飞机这样的物理系统的微分方程组。</li></ul><p><strong>人工智能的目标：</strong></p><ul><li>逻辑推理：让计算机能够完成人类能够完成的复杂心理任务。例如下棋和数学问题。</li><li>知识表达：使计算机能够清楚的描述对象、人员和语言。</li><li>规划和导航：使计算机从A点到B点。例如，第一台自动驾驶机器人建于20世纪60年代初。</li><li>自然语言处理：使计算机能够理解和处理语言。例如把英语翻译中文，或者把中文翻译成英语。</li><li>感知：让电脑通过视觉、听觉、触觉和嗅觉与世界交流。</li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习是一门多领域交叉学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</p><p>它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。</p><p><strong>当我们谈论机器学习时，值得一提的是机器学习算法：神经网络。</strong></p><p>神经网络是机器学习算法的关键部分。神经网络是教计算机以人类的方式思考和理解世界的关键。实质上，神经网络是模拟人类的大脑。这被抽象为由加权边缘（突触）连接的节点（神经元）的图形。</p><p>这个神经网络有一层，三个输入和一个输出。任何神经网络都可以有任何数量的层，输入或输出。</p><p><img src="03.jpg" alt=""></p><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>深度学习是所有机器学习算法中的核心关键。深度学习是采用神经网络，用于解决线性不可分的问题。</p><p>深度学习的概念源于人工神经网络的研究。含多隐层的多层感知器就是一种深度学习结构。深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示。</p><p>这个神经网络有两层，三个输入和一个输出。任何神经网络都可以有任何数量的层，输入或输出。输入神经元和最后一层输出神经元之间的层是深层神经网络的隐藏层。</p><p><img src="04.jpg" alt=""></p><p><strong>总结：机器学习是人工智能的前沿，深度学习是机器学习的前沿。</strong><br><strong>想了解更多编程内容，请关注技术学派。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家现在经常会听到别人提起人工智能、机器学习和深度学习。怎样才可以正确的使用这些词呢？他们的区别是什么呢？&lt;/p&gt;&lt;p&gt;机器学习算法是人工智能背后的推动力量，所有机器学习算法中最关键的是深度学习。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;简单来说，人工智能、机器学习和深度学习都是属于一
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
  </entry>
  
  <entry>
    <title>儿童节到了，聊聊你会让孩子去学习编程么？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%84%BF%E7%AB%A5%E8%8A%82%E5%88%B0%E4%BA%86%EF%BC%8C%E8%81%8A%E8%81%8A%E4%BD%A0%E4%BC%9A%E8%AE%A9%E5%AD%A9%E5%AD%90%E5%8E%BB%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/儿童节到了，聊聊你会让孩子去学习编程么？/</id>
    <published>2018-06-01T04:00:09.146Z</published>
    <updated>2018-06-01T05:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>儿童节到了，小朋友们都欢天喜地的拿着父母送给自己喜欢的礼物嬉闹着。今天小编在上班的路上看到了一队队参加儿童节活动的小朋友们，看到每个孩子脸上洋溢着幸福的表情，小编心情也很高兴，今天一定是开心的一天。</p><p>作为一名程序员，作为父母，希望大家今天可以放下手头的工作，按时回家陪陪孩子。也许你会说工作确实太忙，最近项目要上线，但小编觉得今天是非常有意义的一天。大家还是准时下班和老婆孩子一起吃个家庭饭才是王道。</p><img src="/blog/学习答疑/学习答疑/儿童节到了，聊聊你会让孩子去学习编程么？/01.jpg" title="Markdown 语法"><h3 id="你会让孩子去学习编程么？"><a href="#你会让孩子去学习编程么？" class="headerlink" title="你会让孩子去学习编程么？"></a>你会让孩子去学习编程么？</h3><p><strong>接下来小编想问问大家，聊一聊将要为人父母的你，是否会让孩子去学习编程呢？</strong></p><p>在欧美，现在将编程视为学校常规教育的一部分，似乎一夜之间，编程就成为了儿童教育中重要的一环。而国内各种编程教学班也遍地开花。那么孩子真有必要去学习编程么？</p><p>其实小编觉得对于大部分孩子来说，编程并不是“必须”的学习课程。对孩子的成长来说，能够称得上必须要的教育，也就是数学、语言、逻辑和体育了。数学是所有理科的基础，语言是所有文科的基础，逻辑是思维的基础，体育是身体的基础。但编程却是一种不错的兴趣选项，可以帮助孩子掌握一些应用更广泛的基础技能。</p><h3 id="学习编程-≠-培养程序员"><a href="#学习编程-≠-培养程序员" class="headerlink" title="学习编程 ≠ 培养程序员"></a>学习编程 ≠ 培养程序员</h3><p><img src="02.jpg" alt=""></p><p>可能大家会习惯性地认为学习编程只是为了从事程序员的工作。不是的，其实编程本身并不是必要的。但编程确实是一种不错的选修课，可以让孩子掌握一些编程基础技能也是好的。</p><p>小编曾经和一个同事的姐姐聊天，她是一位小学老师，我曾问过她：“什么样的教育才能帮助到孩子未来的职业规划？”她的回答是：<strong>“培养广泛的兴趣，以及那些最基础的能力，这样孩子在未来才有更多的选择空间，才可能适应我们无法预测的未来社会职业分工的变化。”</strong></p><p>其实学习编程也是如此。它并不是把孩子的未来职业发展定向到程序员上，我们要做的是不要缩窄孩子的未来可能性，相反的，通过这种培养尽量扩张孩子未来的选择权。学习编程的意义可以培养孩子一方面在于了解互联网时代的思维逻辑和生存方式，更主要的，还可以培养一些他未来无论做什么工作，都会有帮助的能力。</p><p><strong>1.抽象思维</strong></p><p>其实编程的过程对于孩子来说是非常新奇的，对他们来说，这是他们第一次接触“抽象思维”的过程。</p><p>“抽象思维”经常被当做理工科的特点，因为相对于其他工作，理工科的学习和工作需要大量的“抽象”过程，也就是将具体形象的实物，转变为抽象的模型。这样无论孩子以后做什么职业，这种抽象思维的能力都会起到很大的帮助。</p><p><strong>2.工程能力</strong></p><p>编程还可以让孩子学习如何掌握工程能力，简单的说，就是学会如何做一个小项目经理。</p><p>编程本身虽然是一种技术，但学习编程所要做的，是完成不同的项目工程。比如我们想要把一个球扔进球框里，现实生活中这只是一个下意识的动作，但如果要靠编程来实现的话，就必须选择合适的工具：语句或者控件，不断地去修改参数，调试试错，最终实现目标。这和做一个专业的火山模型科学项目没有什么差别。</p><p><strong>最后在这里，小编祝所有程序员的宝宝们“儿童节快乐！”</strong></p><p><strong>欢迎大家提出不同的观点和看法，我们共同讨论，共同学习。</strong></p><p><strong>分享 IT 技术和行业经验，请关注技术学派。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;儿童节到了，小朋友们都欢天喜地的拿着父母送给自己喜欢的礼物嬉闹着。今天小编在上班的路上看到了一队队参加儿童节活动的小朋友们，看到每个孩子脸上洋溢着幸福的表情，小编心情也很高兴，今天一定是开心的一天。&lt;/p&gt;&lt;p&gt;作为一名程序员，作为父母，希望大家今天可以放下手头的工作，按时
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Python必会的12道面试题，附详细讲解</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/Python%E5%BF%85%E4%BC%9A%E7%9A%8412%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%99%84%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/Python必会的12道面试题，附详细讲解/</id>
    <published>2018-05-31T08:08:02.177Z</published>
    <updated>2018-05-31T09:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天技术学派为大家收集了一些Python的面试题，最近好多小伙伴给我留言说在学习Python，希望可以多发一些Python的文章。小编非常欣慰有这么多好学的小伙伴，那大家加油，把Python学好，每天都进步一点点。接下来就把这12道面试题分享给大家。</p><img src="/blog/学习答疑/学习答疑/Python必会的12道面试题，附详细讲解/01.jpg" title="Markdown 语法"><h3 id="1-单引号、双引号和三引号之间的区别"><a href="#1-单引号、双引号和三引号之间的区别" class="headerlink" title="1.单引号、双引号和三引号之间的区别"></a>1.单引号、双引号和三引号之间的区别</h3><p><strong>单引号和双引号主要是用来表示字符串</strong></p><p>比如:</p><p>单引号:’python’</p><p>双引号:”python”</p><p>区别:</p><p>若你的字符串里面本身包含单引号,必须用双引号包裹。</p><p>比如:”can’t find the log “</p><p><strong>三引号</strong></p><p>三单引号:’’’python ‘’’,也可以表示字符串一般用来输入多行文本,或者用于大段的注释。</p><p>三双引号：”””python”””，一般用在类里面,用来注释类,这样省的写文档,直接用类的对象<strong>doc</strong>访问获得文档。</p><h3 id="2-Python的参数传递，是值传递还是引用传递？"><a href="#2-Python的参数传递，是值传递还是引用传递？" class="headerlink" title="2.Python的参数传递，是值传递还是引用传递？"></a>2.Python的参数传递，是值传递还是引用传递？</h3><p>Python的参数传递有：</p><p>位置参数</p><p>默认参数</p><p>可变参数</p><p>关键字参数</p><p>函数的传值到底是值传递还是引用传递，要看情况</p><p><strong>不可变参数用值传递：</strong></p><p>比如像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象。</p><p><strong>可变参数是用引用传递：</strong></p><p>比如像列表，字典这样的对象是通过引用传递，和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变。</p><h3 id="3-什么是lambda函数？它的好处是什么"><a href="#3-什么是lambda函数？它的好处是什么" class="headerlink" title="3.什么是lambda函数？它的好处是什么?"></a>3.什么是lambda函数？它的好处是什么?</h3><p>lambda 表达式，通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是指匿名函数。</p><p>lambda函数：首要用途是指点短小的回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lambda [arguments]:expression</span><br><span class="line">&gt;&gt;&gt; a=lambdax,y:x+y</span><br><span class="line">&gt;&gt;&gt; a(3,11)</span><br></pre></td></tr></table></figure><p><strong>好处：</strong></p><p>lambda能和def做同样种类的工作，特别是对于那些逻辑简单的函数，直接用lambda会更简洁，而且省去取函数名的麻烦。</p><h3 id="4-字符串格式化-和-format的区别是什么？"><a href="#4-字符串格式化-和-format的区别是什么？" class="headerlink" title="4.字符串格式化: %和 .format的区别是什么？"></a>4.字符串格式化: %和 .format的区别是什么？</h3><p>字符串的format函数非常灵活，很强大,可以接受的参数不限个数，并且位置可以不按顺序，而且有较为强大的格式限定符(比如:填充、对齐、精度等)。</p><h3 id="5-Python是如何进行内存管理的？"><a href="#5-Python是如何进行内存管理的？" class="headerlink" title="5.Python是如何进行内存管理的？"></a>5.Python是如何进行内存管理的？</h3><p>Python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。</p><p>引用计数增加的情况：</p><p>一个对象分配一个新名称</p><p>将其放入一个容器中（如列表、元组或字典）</p><p>引用计数减少的情况：</p><p>使用del语句对对象别名显示的销毁</p><p>引用超出作用域或被重新赋值</p><p>垃圾回收</p><p>当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。</p><p>内存池机制</p><p>Python提供了对内存的垃圾收集机制，它将不用的内存放到内存池而不是返回给操作系统:</p><p>Pymalloc机制：为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。</p><p>对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。</p><h3 id="6-介绍一下except的用法和作用"><a href="#6-介绍一下except的用法和作用" class="headerlink" title="6.介绍一下except的用法和作用"></a>6.介绍一下except的用法和作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try…except…except…[else…][finally…]</span><br></pre></td></tr></table></figure><p>执行try下的语句，如果引发异常，则执行过程会跳到except语句。对每个except分支顺序尝试执行，如果引发的异常与except中的异常组匹配，执行相应的语句。</p><p>如果所有的except都不匹配，则异常会传递到下一个调用本代码的最高层try代码中。</p><p>try下的语句正常执行，则执行else块代码。如果发生异常，就不会执行。</p><p>如果存在finally语句，最后总是会执行。</p><h3 id="7-下面的代码会不会报错？"><a href="#7-下面的代码会不会报错？" class="headerlink" title="7.下面的代码会不会报错？"></a>7.下面的代码会不会报错？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class="line">print list[10:]</span><br></pre></td></tr></table></figure><p>当试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表长度数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p><p>一个讨厌的小问题是它会导致出现Bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</p><h3 id="8-以下的代码的输出将是什么-并进行解释"><a href="#8-以下的代码的输出将是什么-并进行解释" class="headerlink" title="8.以下的代码的输出将是什么? 并进行解释"></a>8.以下的代码的输出将是什么? 并进行解释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Parent(object):</span><br><span class="line">x = 1</span><br><span class="line">class Child1(Parent):</span><br><span class="line">pass</span><br><span class="line">class Child2(Parent):</span><br><span class="line">pass</span><br><span class="line">print Parent.x, Child1.x, Child2.x</span><br><span class="line">Child1.x = 2</span><br><span class="line">print Parent.x, Child1.x, Child2.x</span><br><span class="line">Parent.x = 3</span><br><span class="line">print Parent.x, Child1.x, Child2.x</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">1 1 1</span><br><span class="line">1 2 1</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure><p>可能使你困惑的应该是最后一行的输出结果是 3 2 3 而不是 3 2 1。为什么改变了 Parent.x 的值还会改变 Child2.x 的值，但是同时 Child1.x 值却没有改变？</p><p>这个答案的关键是：在 Python中，类变量在内部是作为字典处理的。如果一个变量的名字没有在当前类的字典中发现，将搜索祖先类（比如父类）直到被引用的变量名被找到.</p><p>首先，在父类中设置 x = 1 会使得类变量 x 在引用该类和其任何子类中的值为 1。这就是因为第一个 print 语句的输出是 1 1 1</p><p>然后，如果任何它的子类重写了该值（例如，我们执行语句 Child1.x = 2）该值仅仅在子类中被改变。这就是为什么第二个 print 语句的输出是 1 2 1</p><p>最后，如果该值在父类中被改变（例如，我们执行语句 Parent.x = 3），这个改变会影响到任何未重写该值的子类当中的值（在这个示例中被影响的子类是 Child2）。这就是为什么第三个 print 输出是 3 2 3了。</p><h3 id="9-说出下面list1，list2-list3的输出值分别是什么？"><a href="#9-说出下面list1，list2-list3的输出值分别是什么？" class="headerlink" title="9.说出下面list1，list2,list3的输出值分别是什么？"></a>9.说出下面list1，list2,list3的输出值分别是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def extendList(val, list=[]):</span><br><span class="line">list.append(val)</span><br><span class="line">return list</span><br><span class="line">list1 = extendList(10)</span><br><span class="line">list2 = extendList(123,[])</span><br><span class="line">list3 = extendList(&apos;a&apos;)</span><br><span class="line">print &quot;list1 = %s&quot; % list1</span><br><span class="line">print &quot;list2 = %s&quot; % list2</span><br><span class="line">print &quot;list3 = %s&quot; % list3</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">list1 = [10, &apos;a&apos;]</span><br><span class="line">list2 = [123]</span><br><span class="line">list3 = [10, &apos;a&apos;]</span><br></pre></td></tr></table></figure><p>许多人会错误的认为 list1 应该等于 [10] 以及 list3 应该等于 [‘a’]。认为 list 的参数会在 extendList 每次被调用的时候会被设置成它的默认值 []。</p><p>尽管如此，实际发生的事情是，新的默认列表仅仅只在函数被定义时创建一次。随后当 extendList 没有被指定的列表参数调用的时候，其使用的是同一个列表。这就是为什么当函数被定义的时候，表达式是用默认参数被计算，而不是它被调用的时候。</p><p>因此，list1 和 list3 是操作的相同的列表。而list2是操作的它创建的独立的列表（通过传递它自己的空列表作为list参数的值）</p><h3 id="10-请写出一段Python代码，实现删除list里面重复的元素"><a href="#10-请写出一段Python代码，实现删除list里面重复的元素" class="headerlink" title="10.请写出一段Python代码，实现删除list里面重复的元素"></a>10.请写出一段Python代码，实现删除list里面重复的元素</h3><ol><li>使用set函数，set(list)</li><li>使用字典函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=[1,2,4,2,4,5,6,5,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt; b=&#123;&#125;</span><br><span class="line">&gt;&gt;&gt;b=b.fromkeys(a)</span><br><span class="line">&gt;&gt;&gt;c=list(b.keys())</span><br><span class="line">&gt;&gt;&gt; c</span><br></pre></td></tr></table></figure><h3 id="11-用sort进行排序，然后从最后一个元素开始判断"><a href="#11-用sort进行排序，然后从最后一个元素开始判断" class="headerlink" title="11.用sort进行排序，然后从最后一个元素开始判断"></a>11.用sort进行排序，然后从最后一个元素开始判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=[1,2,4,2,4,5,7,10,5,5,7,8,9,0,3]</span><br><span class="line">a.sort()</span><br><span class="line">last=a[-1]</span><br><span class="line">for i inrange(len(a)-2,-1,-1):</span><br><span class="line">if last==a:</span><br><span class="line">del a</span><br><span class="line">else:last=a</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="12-写出你认为最Pythonic的代码"><a href="#12-写出你认为最Pythonic的代码" class="headerlink" title="12.写出你认为最Pythonic的代码"></a>12.写出你认为最Pythonic的代码</h3><p>下面给大家列出一些例子</p><p><strong>交互变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">非Pythonic</span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line">pythonic:</span><br><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><p><strong>判断其值真假</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;Tim&apos;</span><br><span class="line">langs = [&apos;AS3&apos;, &apos;Lua&apos;, &apos;C&apos;]</span><br><span class="line">info = &#123;&apos;name&apos;: &apos;Tim&apos;, &apos;sex&apos;: &apos;Male&apos;, &apos;age&apos;:23 &#125;</span><br><span class="line">非Pythonic</span><br><span class="line">if name != &apos;&apos; and len(langs) &gt; 0 and info != &#123;&#125;:</span><br><span class="line">print(&apos;All True!&apos;)</span><br><span class="line">pythonic:</span><br><span class="line">if name and langs and info:</span><br><span class="line">print(&apos;All True!&apos;)</span><br></pre></td></tr></table></figure><p><strong>列表推导式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[x for x in range(1,100) if x%2==0]</span><br><span class="line">zip创建键值对</span><br><span class="line">keys = [&apos;Name&apos;, &apos;Sex&apos;, &apos;Age&apos;]</span><br><span class="line">values = [&apos;Jack&apos;, &apos;Male&apos;, 23]</span><br><span class="line">dict(zip(keys,values))</span><br></pre></td></tr></table></figure><p>pythonic的代码其实有很多，这里就给大家举几个典型的例子。</p><p><strong>想了解更多编程内容，请关注-技术学派。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天技术学派为大家收集了一些Python的面试题，最近好多小伙伴给我留言说在学习Python，希望可以多发一些Python的文章。小编非常欣慰有这么多好学的小伙伴，那大家加油，把Python学好，每天都进步一点点。接下来就把这12道面试题分享给大家。&lt;/p&gt;&lt;img src
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
      <category term="python" scheme="http://www.JiShuXuePai.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>前端开发者常用的插件汇总，看看你用过几个？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E6%B1%87%E6%80%BB%EF%BC%8C%E7%9C%8B%E7%9C%8B%E4%BD%A0%E7%94%A8%E8%BF%87%E5%87%A0%E4%B8%AA%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/插件资源库/插件资源库/前端开发者常用的插件汇总，看看你用过几个？/</id>
    <published>2018-05-29T03:20:00.367Z</published>
    <updated>2018-05-29T03:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Touch-js"><a href="#Touch-js" class="headerlink" title="Touch.js"></a>Touch.js</h3><blockquote><p>Touch.js是移动设备上的手势识别与事件库, 由百度云Clouda团队维护，也是在百度内部广泛使用的开发工具.</p></blockquote><img src="/blog/插件资源库/插件资源库/前端开发者常用的插件汇总，看看你用过几个？/01.png" title="Markdown 语法"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://www.bootcdn.cn/touchjs/</span><br></pre></td></tr></table></figure><h3 id="Zepto-js"><a href="#Zepto-js" class="headerlink" title="Zepto.js"></a>Zepto.js</h3><blockquote><p>Zepto的设计目的是提供 jQuery 的类似的API，但并不是100%覆盖 jQuery 。Zepto设计的目的是有一个5-10k的通用库、下载并快速执行、有一个熟悉通用的API，所以你能把你主要的精力放到应用开发上。</p></blockquote><p><img src="02.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://www.zeptojs.cn/</span><br></pre></td></tr></table></figure><h3 id="iScroll-js"><a href="#iScroll-js" class="headerlink" title="iScroll.js"></a>iScroll.js</h3><blockquote><p>iScroll是一个高性能，资源占用少，无依赖，多平台的javascript滚动插件。它可以在桌面，移动设备和智能电视平台上工作。它一直在大力优化性能和文件大小以便在新旧设备上提供最顺畅的体验。</p></blockquote><p><img src="03.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：https://www.cnblogs.com/RuMengkai/p/6593709.html</span><br></pre></td></tr></table></figure><h3 id="Hammer-js"><a href="#Hammer-js" class="headerlink" title="Hammer.js"></a>Hammer.js</h3><blockquote><p>Hammer.js是一个开源的,轻量级的javascript库,它可以在不需要依赖其他东西的情况下识别触摸,鼠标事件。</p></blockquote><p><img src="04.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://hammerjs.github.io/</span><br></pre></td></tr></table></figure><h3 id="jQuery-Mobile"><a href="#jQuery-Mobile" class="headerlink" title="jQuery Mobile"></a>jQuery Mobile</h3><blockquote><p>jQuery Mobile是一个基于html5的用户界面系统，旨在使所有智能手机、平板电脑和桌面设备都能访问到响应性的网站和应用程序。</p></blockquote><p><img src="05.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://jquerymobile.com/</span><br></pre></td></tr></table></figure><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><blockquote><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</p></blockquote><p><img src="06.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://www.bootcss.com/</span><br></pre></td></tr></table></figure><h3 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h3><blockquote><p>Swiper是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。能实现触屏焦点图、触屏Tab切换、触屏多图切换等常用效果。</p></blockquote><p><img src="07.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站地址：http://www.swiper.com.cn/</span><br></pre></td></tr></table></figure><p>在工作中使用插件可以大大提升我们的工作效率。</p><p><strong>建议：但是技术学派在这里提醒大家也不要太依赖插件哦，如果时间允许的话，不要总是直接去用别人写好的插件和库，而是看他们是怎么写的，模仿着他们的写法，多思考人家的思路，再找到自己的风格。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Touch-js&quot;&gt;&lt;a href=&quot;#Touch-js&quot; class=&quot;headerlink&quot; title=&quot;Touch.js&quot;&gt;&lt;/a&gt;Touch.js&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Touch.js是移动设备上的手势识别与事件库, 由百度云Cloud
      
    
    </summary>
    
      <category term="插件资源库" scheme="http://www.JiShuXuePai.com/categories/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/"/>
    
    
      <category term="web前端" scheme="http://www.JiShuXuePai.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>C、C++、Java、JavaScript、PHP、Python分别用来开发什么？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/C%E3%80%81C++%E3%80%81Java%E3%80%81JavaScript%E3%80%81PHP%E3%80%81Python%E5%88%86%E5%88%AB%E7%94%A8%E6%9D%A5%E5%BC%80%E5%8F%91%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/C、C++、Java、JavaScript、PHP、Python分别用来开发什么？/</id>
    <published>2018-05-23T06:07:05.831Z</published>
    <updated>2018-05-23T09:30:21.236Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们先普及一下编程语言的基础知识。用任何编程语言来开发程序，都是为了让计算机干活，比如编写一篇文章，下载一首MP3等，而计算机干活的CPU只认识机器的指令，所以，尽管不同的编程语言差异极大，最后都得“翻译”成CPU可以执行的机器指令。理论上任何语言干任何事情几乎都可以, 但是主要干什么那就不一样了。</p><h3 id="C和C"><a href="#C和C" class="headerlink" title="C和C++"></a>C和C++</h3><blockquote><p>C/C++理论上说可以做任何开发, 只要有合适的硬件驱动和API，特点是效率高，基本上是编译语言里面效率最高的。除非你的系统中连C/C++编译器都不具备. 某些系统当中C++编译器是不具备的, 但是C一般都具备. 目前而言, C语言主要用来开发底层模块(比如驱动,解码器,算法实现), 服务应用(比如web服务器)和嵌入式应用(比如微波炉里的程序). C++也可以做这些, 不过由于C++的复杂性和标准问题, 人们还是更愿意使用C来做. C++更适合比较复杂但又特别需要高效率的设施，比如大型游戏，一些基础库， 大型桌面应用.</p></blockquote><img src="/blog/学习答疑/学习答疑/C、C++、Java、JavaScript、PHP、Python分别用来开发什么？/c.jpg" title="Markdown 语法"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">C: 系统底层, 驱动, 嵌入式开发.</span><br><span class="line">C++: 游戏开发, 大规模, 高性能, 分布式要求的程序开发。</span><br></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote><p>java常常跟”企业”联系在一起, 因为具备一些很好的语言特性, 以及丰富的框架, 在企业应用中最被青睐, 你总可以听到关于J2EE, JSP, Hibernate之类的东西的讨论. 同时, java在手机领域也有一席之地, 在普遍智能化之前, 很多手机就是以支持java应用作为卖点的, 而智能手机爆发之后, java手机主场变成了android, 作为安卓的标准编程语言而存在.</p></blockquote><p><img src="java.jpg" alt=""><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">Java: 网页, 企业级开发, 普通应用软件, 游戏后台。</span><br></pre></td></tr></table></figure><p></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><blockquote><p>javascript听起来跟java有关系, 其实并没有任何关系, 只是名字像而已.就好比雷峰塔和雷锋的关系一样，虽然只差一个字。 js最广泛的应用毫无疑问是在web前端. 简单的说, 网站给你传过来的是一堆用各种标签表示格式的文档, 而js负责操纵这些文档实现一些客户端动态效果. js的领地还不仅如此, 现在的Node.js还可以用于服务器端的开发.</p></blockquote><p><img src="js.jpg" alt=""><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">JavaScript是浏览器的脚本语言，一般和Html，CSS这些一起学，主要做网站的前端开发，展现各种酷炫的画面。</span><br></pre></td></tr></table></figure><p></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><blockquote><p>php这三个字你常常会在浏览器地址栏里看到, 所以不意外php是用来开发网站的. 也是web后端的王者语言.无数的网站后端都运行着php代码.</p></blockquote><p><img src="php.jpg" alt=""><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">PHP：主要是网络前端，用于生成网页。也可以整个web服务器都用php，比如很多论坛引擎。</span><br></pre></td></tr></table></figure><p></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><blockquote><p>Python由于具有丰富和强大的库，它又叫做作胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。Python是做服务器开发与物联网开发。信息安全，大数据处理，数据可视化机器学习，物联网开发，各大软件的api，桌面应用，都需要python.</p></blockquote><p><img src="python.jpg" alt=""><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">Python：动态解释型，开发效率高，开源，灵活，入门门槛低。</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我们先普及一下编程语言的基础知识。用任何编程语言来开发程序，都是为了让计算机干活，比如编写一篇文章，下载一首MP3等，而计算机干活的CPU只认识机器的指令，所以，尽管不同的编程语言差异极大，最后都得“翻译”成CPU可以执行的机器指令。理论上任何语言干任何事情几乎都可以
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
  </entry>
  
  <entry>
    <title>十个最受欢迎的机器学习Python库，你知道几个？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/%E5%8D%81%E4%B8%AA%E6%9C%80%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0Python%E5%BA%93%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E5%87%A0%E4%B8%AA%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/插件资源库/插件资源库/十个最受欢迎的机器学习Python库，你知道几个？/</id>
    <published>2018-05-21T09:53:31.105Z</published>
    <updated>2018-05-22T08:50:51.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018年将会是人工智能和机器学习快速发展的一年，有专家表示：相较之下Python比Java更加接地气，也自然而然地成为机器学习的首选语言。</p></blockquote><p>今天我们就来介绍一下最受欢迎的机器学习库，希望你能够在这里寻找到你未来一段时间内的<strong>“利器”</strong>。</p><h3 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h3><blockquote><p>脸谱网今年推出的，在深入学习社区是非常受欢迎。pytorch是建立在一个受欢迎的火炬框架，特别是基于Python。考虑到过去几年人们一直在使用Python进行数据科学研究，这也是大多数学习库使用Python的原因。</p></blockquote><img src="/blog/插件资源库/插件资源库/十个最受欢迎的机器学习Python库，你知道几个？/PyTorch.png" title="Markdown 语法"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://pytorch.org/</span><br></pre></td></tr></table></figure><h3 id="Caffe2"><a href="#Caffe2" class="headerlink" title="Caffe2"></a>Caffe2</h3><blockquote><p>今年，脸谱网还发布了另一个DL框架，牛奶。原来的Caffe框架已被广泛使用多年，以其很好的性能和测试代码库。然而，DL最近的趋势使得这个框架在某些方面有所突破。所以牛奶代替了它。</p></blockquote><p><img src="Caffe2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://caffe2.ai/</span><br></pre></td></tr></table></figure><h3 id="Pipenv"><a href="#Pipenv" class="headerlink" title="Pipenv"></a>Pipenv</h3><blockquote><p>pipenv是今年初管理依赖官方推荐工具。pipenv最初是一个项目由Kenneth Reitz创建，其目的是整合其他软件包管理器的创新，比如故宫或纱，Python。安装virtualenv和virtualenvwrapper，确保依赖版本的依赖版本的重复性。Pipenv，你可以指定所有的依赖性，通常使用命令来添加，删除或更新的依赖。该工具可以生成一个文件，使您的构建具有确定性，可以帮助您避免难以捕获的bug。</p></blockquote><p><img src="Pipenv.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/pypa/pipenv</span><br></pre></td></tr></table></figure><h3 id="Pendulum"><a href="#Pendulum" class="headerlink" title="Pendulum"></a>Pendulum</h3><blockquote><p>一个摆的优点是，它是Python标准DateTime类的直接替代品，所以你可以很容易地将它与现有的代码，只在需要的时候使用它。作者特别注意确保时区得到正确处理，并默认每个实例时区的时区被感知。你也会得到一个扩展timedelta，所以它更容易的日期和时间。</p></blockquote><p><img src="pendulum.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/sdispater/pendulum</span><br></pre></td></tr></table></figure><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><blockquote><p>如果你是做科学的数据，你可以使用优秀的工具，如大熊猫、scikit在Python的系统学习。你也可以使用jupyternotebook来管理你的工作流程。但是当你和那些不知道如何使用这些工具的人一起工作时，你会怎么做呢？如何构建一个界面，让人们在整个过程中轻松地播放数据并可视化它们？在过去，您可能需要一个专业的JavaScript前端团队来构建这些GUI。</p></blockquote><p><img src="Dash.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://kapeli.com/dash</span><br></pre></td></tr></table></figure><h3 id="Fire"><a href="#Fire" class="headerlink" title="Fire"></a>Fire</h3><blockquote><p>火灾是一个开源库。它可以为任何python项目自动生成CLI。钥匙是自动的。您几乎不需要编写任何代码或文档来构建CLI。你只需要调用一个火方法并把它传递给它需要构建的CLI。</p></blockquote><p><img src="Fire.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/google/python-fire</span><br></pre></td></tr></table></figure><h3 id="PyFlux"><a href="#PyFlux" class="headerlink" title="PyFlux"></a>PyFlux</h3><blockquote><p>pyflux是一个开源库的Python，特别是时间序列的发展。时间序列研究是统计学和计量经济学的一个分支，它可以描述时间序列是如何表达的（由潜在因素或利益特征表示）和预测未来行为。pyflux允许时间序列建模的使用，和现代时间序列GARCH模型等已实施。</p></blockquote><p><img src="PyFlux.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/RJT1990/pyflux</span><br></pre></td></tr></table></figure><h3 id="imbalanced-learn"><a href="#imbalanced-learn" class="headerlink" title="imbalanced-learn"></a>imbalanced-learn</h3><blockquote><p>在理想情况下，我们将得到完全平衡的数据集，但不幸的是，现实世界是不一样的。有些任务的数据非常不平衡。例如，在预测信用卡交易中的欺诈行为时，您期望绝大多数交易（99.9%）是合法的。ML算法的幼稚训练可能会导致令人失望的性能，因此在处理这些类型的数据集时需要特别小心。</p></blockquote><p><img src="imbalanced-learn.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/scikit-learn-contrib/</span><br></pre></td></tr></table></figure><h3 id="FlashText"><a href="#FlashText" class="headerlink" title="FlashText"></a>FlashText</h3><blockquote><p>如果你需要寻找一些文本和取代它与其他内容（最喜欢的数据清理刘成中），它通常将正则表达式。通常，正则表达式是解决这个问题的完美方法。但有时会出现这样的情况：需要搜索的术语数是数千个，然后正则表达式可能变得非常缓慢。在这一点上，FlashText是一个更好的选择，大大提高了整个手术的时间（从5到15分钟）。flashtext的优点是，无论多少个搜索条件，运行时间是相同的，而正则表达式的运行时间与条件数线性增长。</p></blockquote><p><img src="FlashText.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://flashtext.com/</span><br></pre></td></tr></table></figure><h3 id="Luminoth"><a href="#Luminoth" class="headerlink" title="Luminoth"></a>Luminoth</h3><blockquote><p>luminoth是一个开源的计算机视觉，是与TensorFlow和十四行诗内置Python工具包。目前，它能以模型的目标检测支持更快r-cnn。</p></blockquote><p><img src="Luminoth.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://luminoth.ai/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;2018年将会是人工智能和机器学习快速发展的一年，有专家表示：相较之下Python比Java更加接地气，也自然而然地成为机器学习的首选语言。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;今天我们就来介绍一下最受欢迎的机器学习库，希望你能够在这里寻找到你未来
      
    
    </summary>
    
      <category term="插件资源库" scheme="http://www.JiShuXuePai.com/categories/%E6%8F%92%E4%BB%B6%E8%B5%84%E6%BA%90%E5%BA%93/"/>
    
    
      <category term="python" scheme="http://www.JiShuXuePai.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>为什么Python是入行人工智能的首选语言？</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E4%B8%BA%E4%BB%80%E4%B9%88Python%E6%98%AF%E5%85%A5%E8%A1%8C%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E9%A6%96%E9%80%89%E8%AF%AD%E8%A8%80%EF%BC%9F/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/为什么Python是入行人工智能的首选语言？/</id>
    <published>2018-05-18T01:56:26.741Z</published>
    <updated>2018-05-18T02:07:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实在所有编程语言里，Python并不算新宠，在1991年就发布了第一个版本，至今已经快30年了。</p><p>最近几年，随着人工智能概念的火爆，Python也迅速升温，成为了众多AI从业者的首选语言。</p><p>根据数据平台 Kaggle发布的机器学习及数据科学调查报告，在工具语言使用方面，Python是数据科学家和人工智能从业者使用最多的语言。<br><img src="/blog/学习答疑/学习答疑/为什么Python是入行人工智能的首选语言？/paihang.jpg" title="Markdown 语法"></p><p>在IEEE Spectrum发布的最受欢迎编程语言列表中，Python同样也位居榜首。</p><p><img src="640.jpg" alt=""></p><h2 id="那为什么Python现在变得这么火爆呢？"><a href="#那为什么Python现在变得这么火爆呢？" class="headerlink" title="那为什么Python现在变得这么火爆呢？"></a>那为什么Python现在变得这么火爆呢？</h2><h3 id="1-Python是一种人性化的语言"><a href="#1-Python是一种人性化的语言" class="headerlink" title="1.Python是一种人性化的语言"></a>1.Python是一种人性化的语言</h3><ul><li><p>开发者不需要关注底层</p></li><li><p>语法简单直观</p></li><li><p>表达形式一致</p></li></ul><blockquote><p>我们以”Hello World”为例，来看一下几种语言的代码：</p></blockquote><h4 id="C-语言的代码："><a href="#C-语言的代码：" class="headerlink" title="C 语言的代码："></a>C 语言的代码：</h4><figure class="highlight plain"><figcaption><span>main()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"> printf(&quot;Hello, World!&quot;);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java的代码："><a href="#Java的代码：" class="headerlink" title="Java的代码："></a>Java的代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python的代码："><a href="#Python的代码：" class="headerlink" title="Python的代码："></a>Python的代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><p>当然，仅仅是一个”Hello World”的话，C和Java的代码也多不了几行。可是不要忘了，C和Java的代码要运行，都必须先经过编译的环节。</p><p>而Python则不用编译，直接运行。而且都可以不用写文件，一条条语句可以直接作为命令行运行。</p><h3 id="2-强大的AI支持库"><a href="#2-强大的AI支持库" class="headerlink" title="2.强大的AI支持库"></a>2.强大的AI支持库</h3><p><strong>矩阵运算</strong></p><p>NumPy由数据科学家Travis Oliphant创作，支持维度数组与矩阵运算。结合Python内置的math和random库，堪称AI数据神器！有了它们，就可以放心大胆玩矩阵了！</p><p><strong>ML模型</strong></p><p>用Python实现大多数经典模型，几十上百行代码就够了。</p><p>当然，对于普通用户，也可以连算法都不用管，只是调用Scikit-Learn的接口就可以了。</p><p><strong>支持图表</strong></p><p>Python还有许多图表方面的支持库。用来生成各种图形表格，是非常简单的事情。</p><p><img src="new图表.png" alt=""></p><p>现在，人工智能技术在现代社会中的地位日趋重要，尤其在自动化和数据驱动的诸多领域，如图像识别、机器人学、搜索引擎、自动驾驶技术都有不俗的表现。Python语言借助AI和数据科学，攀爬到了编程语言生态链的顶级位置，可以说Python与AI已经紧密捆绑在了一起。</p><p>Python易于阅读和编写，所以经常被称为实用主义，就算是非程序员或开发人员也很容易上手。除此之外，Python还能够满足各种开发需求，为程序员提供了各种选择，如果你习惯了使用python，很容易从一个行业跳到另外一个行业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实在所有编程语言里，Python并不算新宠，在1991年就发布了第一个版本，至今已经快30年了。&lt;/p&gt;&lt;p&gt;最近几年，随着人工智能概念的火爆，Python也迅速升温，成为了众多AI从业者的首选语言。&lt;/p&gt;&lt;p&gt;根据数据平台 Kaggle发布的机器学习及数据科学调查报告
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
      <category term="python" scheme="http://www.JiShuXuePai.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2018 最具就业前景的编程语言，转行者了解一下</title>
    <link href="http://www.JiShuXuePai.com/blog/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/2018%20%E6%9C%80%E5%85%B7%E5%B0%B1%E4%B8%9A%E5%89%8D%E6%99%AF%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%EF%BC%8C%E8%BD%AC%E8%A1%8C%E8%80%85%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    <id>http://www.JiShuXuePai.com/blog/学习答疑/学习答疑/2018 最具就业前景的编程语言，转行者了解一下/</id>
    <published>2018-05-15T07:11:10.335Z</published>
    <updated>2018-05-15T09:02:16.853Z</updated>
    
    <content type="html"><![CDATA[<p>2017年最热门的编程语言莫过于JavaScript和Python了，自然学习这两门技术的人也是最多的，那这个学习趋势在2018年会有怎样的变化呢？</p><h2 id="在2018年最值得学习的编程语言又是哪些呢？"><a href="#在2018年最值得学习的编程语言又是哪些呢？" class="headerlink" title="在2018年最值得学习的编程语言又是哪些呢？"></a>在2018年最值得学习的编程语言又是哪些呢？</h2><img src="/blog/学习答疑/学习答疑/2018%20最具就业前景的编程语言，转行者了解一下/code.jpg" title="Markdown 语法"><p>对于大多数的转行者来说，学习编程的目的就是想找一份高薪的工作，那么肯定是哪个编程语言的就业前景好，就越值得学习。</p><p>在2017年12月底，Coding Dojo发布的2018年最具就业前景的编程语言排行榜，在此次的最有“钱”途的编程语言榜单上，Java排名第一，网红语言Python排名第二，JavaScript排名第三，其次是C++、PHP等。</p><p><img src="pahang.jpg" alt=""><br>对于2018年最有“钱”途的编程语言排行榜，程序员网友们纷纷发表了各自的看法：</p><p>网友一：C# 宇宙第一生产力工具!</p><p>网友二：C# 也有人用?</p><p>网友三：世界上只有两种语言，PHP语言和其它语言。</p><p>网友四：不得不揭晓编程界的秘密：最有前途：C++。目前最火最赚钱：Python。需求量最高：Java。</p><h2 id="那我们就来分析一下这几个最有“钱”途的编程语言"><a href="#那我们就来分析一下这几个最有“钱”途的编程语言" class="headerlink" title="那我们就来分析一下这几个最有“钱”途的编程语言"></a>那我们就来分析一下这几个最有“钱”途的编程语言</h2><h3 id="1-Java"><a href="#1-Java" class="headerlink" title="1.Java"></a>1.Java</h3><p><img src="java.jpg" alt=""></p><p>Java 这种老牌编程语言，虽然一直被诟病语法臃肿，但是其实随着 Java 版本的更新，已经逐渐支持了很多新语言的特性。</p><p>并且在2017年的TIOBE编程语言排行榜上，Java每月总是稳坐第一宝座，毋庸置疑，它仍然是市场上最流行和最火爆的编程语言。</p><p>目前国内的电商行业一片火热，电商平台的数量也十分惊人，由于Java语言开发的电商平台具有安全性高、结构合理，高效、稳定、扩展性强。再者，所有Android应用程序都基于Java。无论是哪一门编程语言，其流行程度短期要超过java都是一件非常困难的事情。</p><h3 id="2-Python"><a href="#2-Python" class="headerlink" title="2.Python"></a>2.Python</h3><p><img src="python.jpg" alt=""></p><p>人工智能（AI）兴起，Python开始大热。<br>Python是一种用于 Web 开发的通用编程语言，Python易于阅读和编写，所以经常被称为实用主义，就算是非程序员或开发人员也很容易上手。除此之外，Python还能够满足各种开发需求，为程序员提供了各种选择，如果你习惯了使用Python，很容易从一个行业跳到另外一个行业，Python被广泛地用于系统运维、图形处理、数学处理、文本处理、数据库编程、网络编程、web编程、多媒体应用、pymo引擎、爬虫编写、人工智能等，加上人工智能（AI）的持续火热，Python作为通用开发语言，地位也是水涨船高。</p><h4 id="当然有人会问了，Python-这么火热，以后会不会竞争很大"><a href="#当然有人会问了，Python-这么火热，以后会不会竞争很大" class="headerlink" title="当然有人会问了，Python 这么火热，以后会不会竞争很大?"></a>当然有人会问了，Python 这么火热，以后会不会竞争很大?</h4><p>Python 之所以这么火热，是因为现在大家都对趋势越来越敏感，大家开始焦虑自己是否会被淘汰，所以很多其他编程语言的从业者都在关注、学习、使用 Python。</p><p>但是真正敢于放弃本职工作，全职转行 Python 开发的人跟整个编程行业的人相比还是少数的，更何况，在一个新的时代即将到来，相对应的需求本就大，所以，一旦人工智能技术有所成熟与突破，Python 的需求还会更大。</p><p>再说到易学性，其实 Python 相比较大部分语言来说，都算是很容易上手的，语法清楚，也没有那么多复杂的概念，非常适合新手学习。</p><h3 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3.JavaScript"></a>3.JavaScript</h3><p><img src="javascript.jpg" alt=""><br>超过 80％ 的开发者和 95％ 的网站都使用 JavaScript 来实现页面上的动态逻辑。</p><p>随着物联网和移动设备越来越流行，React 和 Vue 等 JavaScript前端框架具有巨大的未来潜力，所以我们可能很快就会看到 JavaScript 的普及。</p><h4 id="小结：综上所述，2018年要转行IT学习编程的人，可以考虑从这3者中选择一个去学习。"><a href="#小结：综上所述，2018年要转行IT学习编程的人，可以考虑从这3者中选择一个去学习。" class="headerlink" title="小结：综上所述，2018年要转行IT学习编程的人，可以考虑从这3者中选择一个去学习。"></a>小结：综上所述，2018年要转行IT学习编程的人，可以考虑从这3者中选择一个去学习。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年最热门的编程语言莫过于JavaScript和Python了，自然学习这两门技术的人也是最多的，那这个学习趋势在2018年会有怎样的变化呢？&lt;/p&gt;&lt;h2 id=&quot;在2018年最值得学习的编程语言又是哪些呢？&quot;&gt;&lt;a href=&quot;#在2018年最值得学习的编程语言又
      
    
    </summary>
    
      <category term="学习答疑" scheme="http://www.JiShuXuePai.com/categories/%E5%AD%A6%E4%B9%A0%E7%AD%94%E7%96%91/"/>
    
    
  </entry>
  
  <entry>
    <title>定位布局的三种运用</title>
    <link href="http://www.JiShuXuePai.com/blog/uncategorized/%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%89%E7%A7%8D%E8%BF%90%E7%94%A8/"/>
    <id>http://www.JiShuXuePai.com/blog/uncategorized/定位布局的三种运用/</id>
    <published>2018-05-11T08:14:14.240Z</published>
    <updated>2018-05-11T08:14:14.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定位布局的三种运用"><a href="#定位布局的三种运用" class="headerlink" title="定位布局的三种运用"></a>定位布局的三种运用</h3><p>2017-11-27</p><hr><p>说到定位布局，自然而然会想起<code>position</code>，会想到<code>position</code> 的三种属性值：<code>relative</code> 、<code>absolute</code> 、<code>fixed</code> ;实际上还有另外一种属性：<code>static</code> ，咦？这是啥玩意，我咋没见过呢，其实这个定位属性呢，还是<code>position</code> 的默认值呢，就是<strong><em>不定位</em></strong> ，O(∩_∩)O哈哈~</p><img src="/blog/uncategorized/定位布局的三种运用/net_pic_1.jpg" title="Markdown 语法"><p>不定位我还写你干啥，所以呢，我们平时是不用<code>static</code>的，我们就好好说说我们的常用的三种属性值<code>relative</code> 、<code>absolute</code> 、<code>fixed</code> 。</p><h4 id="relative：相对定位"><a href="#relative：相对定位" class="headerlink" title="relative：相对定位"></a>relative：相对定位</h4><p>relative相对定位，那么相对于谁定位呢，就是相对于它本身啦，relative是一个很贪心的孩子，占着碗里的还看着锅里的，定位了，还不放弃自己原有的位子╭(╯^╰)╮；为什么它这么霸道呢，因为它自己原来的位置是它的定位基点，它要相对于它原来的位置进行定位。下面我们来看一下效果喽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box relative"</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255,0,0,0.5);</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.relative</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>效果如下：</em></p><p><img src="case_my_1.png" alt="相对定位说明图"></p><p>通过上图可以看出来，<code>relative</code> 真是太贪心了是不是？</p><h4 id="absolute：绝对定位"><a href="#absolute：绝对定位" class="headerlink" title="absolute：绝对定位"></a>absolute：绝对定位</h4><p>相对于relative来说，咱们的<code>absolute</code> 就没有那么贪心啦，但是呢，比较淘气，可以脱离文档流快乐的玩耍。但是也不是没有任何约束的，绝对定位的定位方式是相对于它最近的定位元素来定位的（position: static是不算的！），如果没有定位的祖先元素，它就霸气的按照<code>&lt;body&gt;</code> 来定位啦，说的这么绕，听不懂肿么办？话不多说，上demo！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无已定位的祖先元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box absolute"</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*无已定位的祖先元素*/</span></span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255,0,0,0.9);</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.absolute</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>效果如下：</em></p><p><img src="case_my_2.png" alt="绝对定位说明图-1"></p><p>我们明明让它向下向右定位的，它竟然跑偏了，好气呀！</p><p>莫气，莫气，这是因为没有已定位的祖先元素约束它，没人管，它就浪开了，相对于<code>&lt;body&gt;</code> 进行绝对定位啦，那么接下来我们就管管它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span><span class="comment">&lt;!-- 定位的祖先元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box absolute"</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;<span class="comment">/*祖先元素的定位样式*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255,0,0,0.9);</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.absolute</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>效果如下：</em></p><p><img src="case_my_3.png" alt="绝对定位说明图-2"></p><p>这下有祖先管着它啦，不嘚瑟了吧！</p><h4 id="fixed-：固定定位"><a href="#fixed-：固定定位" class="headerlink" title="fixed ：固定定位"></a>fixed ：固定定位</h4><p>说完了霸气的相对定位，讲罢了淘气的绝对定位，接下来我们要聊一聊高冷的固定定位，为什么说<code>fixed</code> 高冷呢，因为它是相对于浏览器窗口进行定位的，它的定位位置和文档、祖先元素都没有关系，页面怎么滚动，你爱咋咋地，它就认准了一个地方不再移动，任尔上下划鼠标，我就只在这儿飘，嘿嘿。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box fixed"</span>&gt;</span>fixed<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255,0,0,0.5);</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixed</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>效果如下：</em></p><p><img src="case_my_4.jpg" alt="固定定位说明图"></p><p>不管滚动条怎么滚动，高冷的<code>fixed</code> 定位的元素依旧固定在原来的位置，一动未动。</p><h4 id="z-index-：不得不说的堆叠顺序"><a href="#z-index-：不得不说的堆叠顺序" class="headerlink" title="z-index ：不得不说的堆叠顺序"></a>z-index ：不得不说的堆叠顺序</h4><p>不管是<code>relative</code> 、<code>absolute</code> 或是<code>fixed</code> 它们都离开了它们原来的位置，显示在定位后的位置，这就导致了抢镜头的现象，会把其它老老实实待在原地的元素给遮挡掉。</p><p><img src="case_my_3.png" alt="绝对定位说明图-2"></p><p>如果我们不想让某个元素未定位的元素被遮挡，应该怎么办呢，很简单：给被挡住的元素添加一个<code>relative</code> 相对定位，不需要加定位位置，然后再加一个<code>z-index</code> 属性就好啦！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;<span class="comment">/*此处z-index的值要比遮挡住它的定位元素的z-index的值要大才行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>z-index</code> 属性的值越大，它对应的位置越靠上，越能实力抢镜！</p><p>对于两个已定位的元素的堆叠顺序调整就更简单啦，只要改变<code>z-index</code> 的值就OK啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定位布局的三种运用&quot;&gt;&lt;a href=&quot;#定位布局的三种运用&quot; class=&quot;headerlink&quot; title=&quot;定位布局的三种运用&quot;&gt;&lt;/a&gt;定位布局的三种运用&lt;/h3&gt;&lt;p&gt;2017-11-27&lt;/p&gt;&lt;hr&gt;&lt;p&gt;说到定位布局，自然而然会想起&lt;code&gt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博文模板</title>
    <link href="http://www.JiShuXuePai.com/blog/uncategorized/%E5%8D%9A%E6%96%87%E6%A8%A1%E6%9D%BF/"/>
    <id>http://www.JiShuXuePai.com/blog/uncategorized/博文模板/</id>
    <published>2018-05-11T08:14:14.232Z</published>
    <updated>2018-05-11T08:14:14.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章参数说明"><a href="#文章参数说明" class="headerlink" title="文章参数说明"></a>文章参数说明</h1><p>在 Markdown 文本文件顶部加入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">author: 李康</span><br><span class="line">categories:</span><br><span class="line">    - js</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote><p>大段文字描述，可以使用引用。</p><p>或者是谈一些感想时，可以使用引用。</p></blockquote><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>尽量言简意赅的用一句话讲解一个知识点。</li><li>如果使用大段文字描述，可以使用引用。</li><li>必要的关键词可以使用<code>高亮</code>。</li><li>尽量使用图片和表格。</li></ul><h3 id="同级标题间留一个空行"><a href="#同级标题间留一个空行" class="headerlink" title="同级标题间留一个空行"></a>同级标题间留一个空行</h3><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 代码要指定编程语言，方便语法高亮。</span><br><span class="line">// 代码顶头对齐。</span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"slideA"</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/01.jpg"</span> <span class="attr">alt</span>=<span class="string">"广告一"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/02.jpg"</span> <span class="attr">alt</span>=<span class="string">"广告二"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03.jpg"</span> <span class="attr">alt</span>=<span class="string">"广告三"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/04.jpg"</span> <span class="attr">alt</span>=<span class="string">"广告四"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/05.jpg"</span> <span class="attr">alt</span>=<span class="string">"广告五"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ac"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"prevBtn"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"nextBtn"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><img src="/blog/uncategorized/博文模板/模板说明.png" title="Markdown 语法">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文章参数说明&quot;&gt;&lt;a href=&quot;#文章参数说明&quot; class=&quot;headerlink&quot; title=&quot;文章参数说明&quot;&gt;&lt;/a&gt;文章参数说明&lt;/h1&gt;&lt;p&gt;在 Markdown 文本文件顶部加入以下代码&lt;/p&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>五星文章收集</title>
    <link href="http://www.JiShuXuePai.com/blog/uncategorized/%E4%BA%94%E6%98%9F%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
    <id>http://www.JiShuXuePai.com/blog/uncategorized/五星文章收集/</id>
    <published>2018-05-11T08:14:14.232Z</published>
    <updated>2018-05-11T08:14:14.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐文章参考标题"><a href="#推荐文章参考标题" class="headerlink" title="推荐文章参考标题"></a>推荐文章参考标题</h1><ul><li>选择的题目不一定是当前所带的课程。</li><li>参考题目会定期更新。</li></ul><h2 id="HTML与CSS网站开发-html"><a href="#HTML与CSS网站开发-html" class="headerlink" title="HTML与CSS网站开发 html"></a>HTML与CSS网站开发 <code>html</code></h2><ol><li>浮动的深入理解与应用</li><li>定位布局的三种运用</li><li>前端开发规范：命名规范、html 规范、css 规范、js 规范</li><li>什么是CSS Hack?</li><li>CSS3 图片滤镜 （Filters）</li></ol><h2 id="JavaScript编程语言-js"><a href="#JavaScript编程语言-js" class="headerlink" title="JavaScript编程语言 js"></a>JavaScript编程语言 <code>js</code></h2><ol><li>详解Javascript 函数声明和函数表达式的区别</li><li>js keyup、keypress和keydown事件 详解</li><li>js中的 attribute 和 property</li><li>js中this的指向问题</li><li>js基于面向对象开发的应用</li><li>js代码预解析、变量作用域</li></ol><h2 id="Vue前端框架-vue"><a href="#Vue前端框架-vue" class="headerlink" title="Vue前端框架 vue"></a>Vue前端框架 <code>vue</code></h2><ol><li>Vue项目在路由跳转时监听并记录滚动条位置</li><li>Vue项目滚动到某位置时实现悬浮功能</li><li>keep-alive在项目实战中的应用</li><li>路由的生命周期及实战应用</li></ol><h2 id="PHP-php"><a href="#PHP-php" class="headerlink" title="PHP php"></a>PHP <code>php</code></h2><ol><li>如何有效的记忆PHP内置函数</li><li>php绝对路径与相对路径详解</li></ol><h2 id="MySql数据库-mysql"><a href="#MySql数据库-mysql" class="headerlink" title="MySql数据库 mysql"></a>MySql数据库 <code>mysql</code></h2><ol><li>PHP连接数据库新方法phpPDO</li></ol><h2 id="Laravel-laravel"><a href="#Laravel-laravel" class="headerlink" title="Laravel laravel"></a>Laravel <code>laravel</code></h2><ol><li>论掌握模板引擎开发的重要性</li><li>Laravel为何能够享誉世界？</li><li>手把手教你学习ThinkPHP框架的开发技巧</li></ol><h2 id="Git团队协同开发-git"><a href="#Git团队协同开发-git" class="headerlink" title="Git团队协同开发 git"></a>Git团队协同开发 <code>git</code></h2><ol><li>Git分支管理详细介绍</li></ol><h2 id="sass-sass"><a href="#sass-sass" class="headerlink" title="sass sass"></a>sass <code>sass</code></h2><ol><li>使用less/sass搭建ui组件库</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;推荐文章参考标题&quot;&gt;&lt;a href=&quot;#推荐文章参考标题&quot; class=&quot;headerlink&quot; title=&quot;推荐文章参考标题&quot;&gt;&lt;/a&gt;推荐文章参考标题&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;选择的题目不一定是当前所带的课程。&lt;/li&gt;&lt;li&gt;参考题目会定期更新。&lt;/li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php中 cookie 和session 应用和区别</title>
    <link href="http://www.JiShuXuePai.com/blog/php/php%20cookie%20%E5%92%8Csession%20%E5%BA%94%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.JiShuXuePai.com/blog/php/php cookie 和session 应用和区别/</id>
    <published>2018-05-11T08:14:14.231Z</published>
    <updated>2018-05-11T08:14:14.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php中-cookie-和session-应用和区别"><a href="#php中-cookie-和session-应用和区别" class="headerlink" title="php中 cookie 和session 应用和区别"></a><code>php</code>中 <code>cookie</code> 和<code>session</code> 应用和区别</h1><h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie?"></a>什么是Cookie?</h3><p>cookie就是网站服务器把用户信息或相关网站信息直接存储用户本地电脑中。</p><p>主要就是节省网站服务器资源之外也为了方便电脑用户，用户网站服务器识别电脑用户身份，大家可以理解为就是因为cookie这个东西，只要第一次成功登录过这个网站，下次还是因为cookie可以不需要登录就可以直接登录了，相当于一个用户通行证吧。</p><h3 id="PHP中Cookie的使用？"><a href="#PHP中Cookie的使用？" class="headerlink" title="PHP中Cookie的使用？"></a><code>PHP</code>中Cookie的使用？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">"zhuruiyun"</span>);  <span class="comment">//设置cookie，括号中第一个参数为名字，第二个参数为值。key-value</span></span><br></pre></td></tr></table></figure><p>设置的Cookie如何使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_COOKIE[<span class="string">'name'</span>];  <span class="comment">//用一个超级全局变量$_COOKIE[cookie名]</span></span><br></pre></td></tr></table></figure><h4 id="如何删除设置的Cookie？"><a href="#如何删除设置的Cookie？" class="headerlink" title="如何删除设置的Cookie？"></a>如何删除设置的Cookie？</h4><p>1.删除cookie 将值设为空即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">''</span>);<span class="comment">//设置值为空</span></span><br></pre></td></tr></table></figure><p>2.将过期时间调整到目前时间还少一秒，那么就等于过期了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">"zhuruiyun"</span>,time()<span class="number">-1</span>); <span class="comment">//第三个参数为过期时间</span></span><br></pre></td></tr></table></figure><h3 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session?"></a>什么是Session?</h3><p>Session:在计算机中，尤其是在网络应用中，称为”会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项</p><h4 id="PHP中Session的使用？"><a href="#PHP中Session的使用？" class="headerlink" title="PHP中Session的使用？"></a><code>PHP</code>中Session的使用？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start();  <span class="comment">//开始session会话处理,session只要用到这个，就必须开启session_start()</span></span><br><span class="line">$_SESSION[<span class="string">'name'</span>]=<span class="string">'zhuruiyun'</span>; <span class="comment">//创建session，直接采用全局超级变量赋值即可</span></span><br></pre></td></tr></table></figure><p>如何取出session值?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><h4 id="如何删除Session？"><a href="#如何删除Session？" class="headerlink" title="如何删除Session？"></a>如何删除Session？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset($_SESSION[<span class="string">'name'</span>]);  <span class="comment">//销毁某一个session值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session_destroy();  <span class="comment">//清空所有session值</span></span><br></pre></td></tr></table></figure><h3 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h3><p>1.存储位置</p><p>​ session是存储在服务器端</p><p>​ cookie是存储在客户端</p><p>2.存储时间</p><p>​ session一般存放1440秒，如果网页没有任何操作，会自动销毁，当然，可以通过<code>php.ini</code>修改保存时间，如果关闭浏览器，自动销毁</p><p>​ cookie在浏览器关闭时就会删除，当然也可以创建一个过期时间</p><p>3.适用位置</p><p>​ session 一般用于后台管理登录，人少。安全性，一段时间不操作会自动过期</p><p>​ cookie适用于会员登录，购物车，因为他不占用服务器资源，而会员，购物车特别多</p><p>4.保存内容</p><p>​ session中保存的是对象</p><p>​ cookie中保存的是字符串。</p><h4 id="cookie的限制"><a href="#cookie的限制" class="headerlink" title="cookie的限制"></a>cookie的限制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">限制在客户端，一个浏览器能创建的cookie数量最多为30个，并且每个不能超过4KB，每个web站点能设置的cookie不能超过20个</span><br></pre></td></tr></table></figure><h4 id="cookie的特性"><a href="#cookie的特性" class="headerlink" title="cookie的特性"></a>cookie的特性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie并不是及时生成，它会慢一拍；第一次刷新只是生成覆盖了原来的，获取的还是之前的，第二次刷新才能真正获取到</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php中-cookie-和session-应用和区别&quot;&gt;&lt;a href=&quot;#php中-cookie-和session-应用和区别&quot; class=&quot;headerlink&quot; title=&quot;php中 cookie 和session 应用和区别&quot;&gt;&lt;/a&gt;&lt;code&gt;ph
      
    
    </summary>
    
      <category term="php" scheme="http://www.JiShuXuePai.com/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-router多视图应用</title>
    <link href="http://www.JiShuXuePai.com/blog/vue/vue-router-%E9%99%88%E7%90%B4/"/>
    <id>http://www.JiShuXuePai.com/blog/vue/vue-router-陈琴/</id>
    <published>2018-05-11T08:14:14.231Z</published>
    <updated>2018-05-11T08:14:14.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-router多视图应用"><a href="#vue-router多视图应用" class="headerlink" title="vue-router多视图应用"></a>vue-router多视图应用</h1><h2 id="vue-router命名视图"><a href="#vue-router命名视图" class="headerlink" title="vue-router命名视图"></a>vue-router命名视图</h2><p>我们在创建一个页面布局，有 <code>tabbar</code>（底部导航） 和 <code>main</code>（主内容） 两个视图，或者比如我们在做豆瓣项目的时候，首页有tabbar（底部导航），但是文章详情页没有tabbar。这个时候命名视图就派上用场了。</p><h3 id="如何配置多视图"><a href="#如何配置多视图" class="headerlink" title="如何配置多视图"></a>如何配置多视图</h3><ol><li><p>在app.vue组件的template模板里面定义2个视图，如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code></p><p>我们可以把主视图设置默认视图，tabbar视图给设置name属性</p><p>例如：</p><p>​<router-view></router-view></p><p>​<router-view name="tabbar"></router-view></p><blockquote><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。</p></blockquote></li><li><p>打开路由配置文件router/index.js，修改new Router配置</p><ul><li><p>配置豆瓣首页路由，既有底部导航（tabbar视图），又有主内容区（default视图），我们就要在首页使用 components 配置2个组件</p><pre><code>//引入首页的组件和tabbar组件import Home from &apos;../components/home&apos;import Tabbar from &apos;../components/Tabbar&apos;export default new Router({  routes: [    {      path: &apos;/home&apos;,      components: {          default: Home,         //配置格式   router-view视图的名称：路由到该视图的组件名称          tabbar: Tabbar      }      }  ]})</code></pre></li><li><p>配置豆瓣详情页路由，详情页只有主内容区，我们就只需要把相应的组件配置到默认视图即可。</p><pre><code>//引入详情页组件import Detail from &apos;../components/detail&apos;{  path: &apos;/detail&apos;,  component:Detail}</code></pre></li></ul></li></ol><blockquote><p>如果在app.vue里面使用了这种多视图的结构，配置路由的时候就可以按这种方式操作，当页面需要哪个视图的时候，就把相应的组件和视图配置起来。</p></blockquote><p>参考：<a href="https://router.vuejs.org/zh-cn/essentials/named-views.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/essentials/named-views.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-router多视图应用&quot;&gt;&lt;a href=&quot;#vue-router多视图应用&quot; class=&quot;headerlink&quot; title=&quot;vue-router多视图应用&quot;&gt;&lt;/a&gt;vue-router多视图应用&lt;/h1&gt;&lt;h2 id=&quot;vue-router命名视
      
    
    </summary>
    
      <category term="vue" scheme="http://www.JiShuXuePai.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>js闭包</title>
    <link href="http://www.JiShuXuePai.com/blog/js/js%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3-%E6%9C%B1%E7%91%9E%E4%BA%91/"/>
    <id>http://www.JiShuXuePai.com/blog/js/js闭包详解-朱瑞云/</id>
    <published>2018-05-11T08:14:14.231Z</published>
    <updated>2018-05-23T06:17:23.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js闭包详解"><a href="#js闭包详解" class="headerlink" title="js闭包详解"></a>js闭包详解</h1><h2 id="什么是js闭包"><a href="#什么是js闭包" class="headerlink" title="什么是js闭包"></a>什么是js闭包</h2><p>闭包就是能够读取其他函数内部变量的函数。在<code>javascript</code>中只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。</p><p>通过一段代码来详细解释闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//b函数是a 函数的子函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(++i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;  <span class="comment">//返回b函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c=a();  <span class="comment">//变量C指向函数b</span></span><br><span class="line">c();<span class="comment">//执行c(),相当于执行b函数，打印 i 的值，第一次为1</span></span><br><span class="line"></span><br><span class="line">代码特点：</span><br><span class="line"><span class="number">1.</span>函数b嵌套在函数a内部</span><br><span class="line"><span class="number">2.</span>函数a返回函数b</span><br><span class="line"></span><br><span class="line">上面的代码就是创建了一个闭包：变量c在函数a外面，引用了函数a内的函数b;</span><br><span class="line"></span><br><span class="line">总结：当父函数中的子函数被父函数外的变量引用的时候，就创建了一个闭包</span><br></pre></td></tr></table></figure><p>理解闭包前要先理解变量作用域。变量作用域分为全局变量和局部变量。</p><h4 id="在js中函数内部可以直接读取全局变量"><a href="#在js中函数内部可以直接读取全局变量" class="headerlink" title="在js中函数内部可以直接读取全局变量"></a>在js中函数内部可以直接读取全局变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="number">999</span>;  <span class="comment">//这里的name就是一个全局变量</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　alert(name);  <span class="comment">//打印name变量</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　test(); <span class="comment">//执行test函数，打印出 999</span></span><br></pre></td></tr></table></figure><h4 id="函数外部无法读取函数内的变量"><a href="#函数外部无法读取函数内的变量" class="headerlink" title="函数外部无法读取函数内的变量"></a>函数外部无法读取函数内的变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> name=<span class="number">999</span>; <span class="comment">//name是函数内定义的变量，在函数外面无法访问到</span></span><br><span class="line">　　&#125;</span><br><span class="line">test(); <span class="comment">//执行test函数</span></span><br><span class="line">　　alert(name); <span class="comment">// name is not defined</span></span><br></pre></td></tr></table></figure><p>注意：在函数内部声明变量的时候，一定要使用var关键字，不然它就是一个全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　name=<span class="number">999</span>;  <span class="comment">//这里的name是全局变量，在函数外可正常访问</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　test(); <span class="comment">//执行test函数</span></span><br><span class="line">　　alert(name); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><h4 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//父函数</span></span><br><span class="line">　　　　<span class="keyword">var</span> name=<span class="number">999</span>; <span class="comment">//定义name变量</span></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//子函数</span></span><br><span class="line">　　　　　　alert(name); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> test1;  <span class="comment">//返回子函数test1</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=test();  <span class="comment">//讲父函数test赋给result变量</span></span><br><span class="line">　　result(); <span class="comment">// 这句话等于执行子函数test1，打印出999</span></span><br></pre></td></tr></table></figure><p>上面案例中的test1函数就是闭包。在JavaScript中只有函数内部的子函数才能读取局部变量。</p><h4 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h4><p>1 .读取函数内部的局部变量</p><p>2.让这些变量的值始终保持在内存中（下面案例来解释这句话是上面意思）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//父函数</span></span><br><span class="line">　　　　<span class="keyword">var</span> a=<span class="number">999</span>;</span><br><span class="line">　　　　numAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)  //<span class="title">numAdd</span>前没有写<span class="title">var</span>关键字，所以这个<span class="title">numAdd</span>就是一个全局变量，它的值是个函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      a=a+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//子函数</span></span><br><span class="line">　　　　　　alert(a);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> test1;  <span class="comment">//返回test1子函数</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=test();  <span class="comment">//将test函数赋给了result变量</span></span><br><span class="line">　　result(); <span class="comment">// 执行test1子函数，此时还没有执行numAdd函数，所以打印的值为999</span></span><br><span class="line">　　numAdd();  <span class="comment">//调用numAdd，全局变量的调用执行，此时值为1000</span></span><br><span class="line">　　result(); <span class="comment">// 执行test1子函数，因为上面已经执行了numAdd函数，所以打印的值为1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//result就是内部函数test1的闭包，test1函数是test的子函数，在test1函数中调用test函数的值并返回该函数，相当于a成了test1中的全局变量。导致test1一直在内存中</span></span><br></pre></td></tr></table></figure><h4 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h4><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;  <span class="comment">//全局变量name</span></span><br><span class="line">　　<span class="keyword">var</span> object = &#123;</span><br><span class="line">　　　　name : <span class="string">"My Object"</span>,  <span class="comment">//对象属性</span></span><br><span class="line">　　　　getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//对象中的方法</span></span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//直接ruturn，就相当于返回这个方法，只是省略了方法名</span></span><br><span class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;  <span class="comment">//this关键字，指向全局</span></span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　alert(object.getNameFunc()());  <span class="comment">//执行object对象中的方法，打印The Window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;<span class="comment">//全局变量name</span></span><br><span class="line">　　<span class="keyword">var</span> object = &#123;</span><br><span class="line">　　　　name : <span class="string">"My Object"</span>, <span class="comment">//对象属性</span></span><br><span class="line">　　　　getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//对象中的方法</span></span><br><span class="line">　　　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;<span class="comment">//用that代替this，this指向的是这个object对象</span></span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//直接ruturn，就相当于返回这个方法，只是省略了方法名</span></span><br><span class="line">　　　　　　　　<span class="keyword">return</span> that.name; <span class="comment">//返回object对象里的name属性</span></span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　alert(object.getNameFunc()());  <span class="comment">//执行object对象中的方法，打印My Object</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js闭包详解&quot;&gt;&lt;a href=&quot;#js闭包详解&quot; class=&quot;headerlink&quot; title=&quot;js闭包详解&quot;&gt;&lt;/a&gt;js闭包详解&lt;/h1&gt;&lt;h2 id=&quot;什么是js闭包&quot;&gt;&lt;a href=&quot;#什么是js闭包&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="js" scheme="http://www.JiShuXuePai.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>php绝对路径与相对路径详解</title>
    <link href="http://www.JiShuXuePai.com/blog/php/php%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.JiShuXuePai.com/blog/php/php绝对路径与相对路径详解/</id>
    <published>2018-05-11T08:14:14.231Z</published>
    <updated>2018-05-11T08:14:14.231Z</updated>
    
    <content type="html"><![CDATA[<p>php中不像其他语言那样“/”表示根目录，代之以$_SERVER[‘DOCUMENT_ROOT’]，其它则相同：../表示向上级目录。./表示当前目录。假如现在a/b/c/s.php要调用根目录下的 /bb/s2.txt，则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$RootDir = $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>];     <span class="comment">//获取当前运行脚本所在的文档根目录。该根目录是由服务器配置文件中定义</span></span><br><span class="line">$fireDir = <span class="string">"$RootDir/bb/s2.txt"</span>;</span><br></pre></td></tr></table></figure><p>或者采用相对路径“../../../bb/s2.txt”，表示向上返回到b再向上到a再向上到根目录然后再到bb下找到s2.txt。</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><blockquote><p>绝对路径是指目录下的绝对位置，直接到达目标位置。例如：d:/www/index.html。只要页面中的目标文件位置不变你的链接还是指向正确的URL。在Web开发的时候一般很少使用绝对路径，因为你本地的环境和服务器上的路径可能不一样。</p></blockquote><p><strong>优点：</strong> 使用绝对路径可以防止网站被恶意抄袭，抄袭默认的链接还是指向自己的网站。</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><blockquote><p>相对路径，就是相对于当前文件的目标文件位置。例如：Web服务器文件夹a下面有index.html和image.jpg两个文件。index.html文件里引入image.jpg，只要这两个文件的相对位置没有变(也就是说还是在文件夹a下面)，那么无论上传到Web服务器的哪个位置，这个路径都是正确的。在相对路径里面，./表示同级目录，../表示上级目录。</p></blockquote><p><strong>优点：</strong> 当你整个项目移动时，你项目内文件之间的相对关系没有改变，之前设置的路径任然是准确的</p><h3 id="相对路径四种类型："><a href="#相对路径四种类型：" class="headerlink" title="相对路径四种类型："></a>相对路径四种类型：</h3><p>案例目录</p><p><img src="http://upload.chinaz.com/upimg/userup/1003/031001104b5.jpg" alt="031001104b5"></p><h4 id="上级对下级的引用（简称上级引用）"><a href="#上级对下级的引用（简称上级引用）" class="headerlink" title="上级对下级的引用（简称上级引用）"></a>上级对下级的引用（简称上级引用）</h4><blockquote><p>先看案例图，在图中项目下分别有aa、bb、 ee三个同级目录和一个index.php文件，在bb下又有cc目录，cc下又有dd目录和cc.php,ccc.php两个文件，同样dd下也包含一个dd.php文件。凡是上层对下层均属上级引用。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index.php对于所有文件的引用 </span><br><span class="line">cc.php对dd.php的引用</span><br><span class="line">ee.php对dd.php的引用</span><br></pre></td></tr></table></figure><ul><li><h5 id="从属上级引用"><a href="#从属上级引用" class="headerlink" title="从属上级引用"></a>从属上级引用</h5><p>类如cc.php对dd.php,因为这两个文件同属于cc目录）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'dd/dd.php'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li><li><h5 id="非从属上级引用"><a href="#非从属上级引用" class="headerlink" title="非从属上级引用"></a>非从属上级引用</h5><p>类如index.php对于所有文件的引用和ee.php对dd.php的引用都属于这种情况，因为它们与被引用的文件并没有一个共同的父目录，都相对于站点根目录。以下是在ee.php中对cc.php的引用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../bb/cc/cc.php'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="下级对上级的引用（简称下级引用）"><a href="#下级对上级的引用（简称下级引用）" class="headerlink" title="下级对上级的引用（简称下级引用）"></a>下级对上级的引用（简称下级引用）</h4><ul><li><h5 id="从属下级引用相对路径以它们的父目录为根目录"><a href="#从属下级引用相对路径以它们的父目录为根目录" class="headerlink" title="从属下级引用相对路径以它们的父目录为根目录"></a>从属下级引用相对路径以它们的父目录为根目录</h5><p>ttt.php对bbff.php的引用就属于这种情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../bb/cc/cc.php'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li><li><h5 id="非从属的下级引用却是以网站的根目录为准的"><a href="#非从属的下级引用却是以网站的根目录为准的" class="headerlink" title="非从属的下级引用却是以网站的根目录为准的"></a>非从属的下级引用却是以网站的根目录为准的</h5><p>ccc.php对ee.php的引用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../../ee/ee.php'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="平级引用或叫同级引用"><a href="#平级引用或叫同级引用" class="headerlink" title="平级引用或叫同级引用"></a>平级引用或叫同级引用</h4><ul><li><h5 id="从属同级引用"><a href="#从属同级引用" class="headerlink" title="从属同级引用"></a>从属同级引用</h5><p>即在同一个目录下的两个文件的引用，在dd.php中引用ttt.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'ttt.php'</span>);</span><br></pre></td></tr></table></figure><p>​</p></li><li><h5 id="非从属同级引用"><a href="#非从属同级引用" class="headerlink" title="非从属同级引用"></a>非从属同级引用</h5><p>即不在同一个目录下（没有共同的父目录，只有以网站目站为父目录的情况），但是级别是相同的两个文件的引用，在aa.php在引用ee.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../ee/ee.php'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>​</p><h4 id="涉及到嵌套的引用"><a href="#涉及到嵌套的引用" class="headerlink" title="涉及到嵌套的引用"></a>涉及到嵌套的引用</h4><p>例如ff.php引用dd.php,而dd.php又引用的gf.php,这种情况，本来dd.php 引用gf.php属于下级引用中的非从属引用，写法是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../../../ee/gf.php'</span>);</span><br></pre></td></tr></table></figure><p>而ff.php引用dd.php属于上级引用中的从属引用，写法是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'./cc/dd/dd.php'</span>);</span><br></pre></td></tr></table></figure><p>可是你会发现在ff.php中无法找到gf.php文件，那该如何写呢？应该在dd.php中这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">'../ee/gf.php'</span>);</span><br></pre></td></tr></table></figure><p>只有这样写就正确了，为什么呢？因为在涉及到嵌套引用的时候被引用文件的相对路径要以最终的引用文件为准!</p><h2 id="简而言之："><a href="#简而言之：" class="headerlink" title="简而言之："></a>简而言之：</h2><blockquote><p>其实很简单的，你用你的web根目录做根目录.不管你怎么定，你文件肯定有一个全部都要包含的文件的，比如有的是global.php，有的是common.php</p></blockquote><p>假如这个文件放在根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wwwroot/<span class="keyword">global</span>.php</span><br></pre></td></tr></table></figure><p><strong>里面第一行加个chdir(dirname(<strong>FILE</strong>)); 切换到global.php所在目录就是根目录</strong></p><p>其他文件使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"../../../global.php"</span>; </span><br><span class="line"><span class="keyword">require</span> <span class="string">"aa/aa.php"</span>; </span><br><span class="line"><span class="keyword">require</span> <span class="string">"bb/bb/cc.php"</span>;</span><br></pre></td></tr></table></figure><p>这样就行了，因为你的global.php已经把路径切换到wwwroot，不用像其他方式那么麻烦了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'ROOT_PATH'</span>,dirname(<span class="keyword">__FILE__</span>)); </span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.....</span><br></pre></td></tr></table></figure><p>chdir(dirname(<strong>FILE</strong>)); 的确很好使，相对位置引入这个文件其他引入文件只要以他为基准就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php中不像其他语言那样“/”表示根目录，代之以$_SERVER[‘DOCUMENT_ROOT’]，其它则相同：../表示向上级目录。./表示当前目录。假如现在a/b/c/s.php要调用根目录下的 /bb/s2.txt，则：&lt;/p&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="php" scheme="http://www.JiShuXuePai.com/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>call与apply的用法</title>
    <link href="http://www.JiShuXuePai.com/blog/js/js/call%E4%B8%8Eapply%E7%94%A8%E6%B3%95/"/>
    <id>http://www.JiShuXuePai.com/blog/js/js/call与apply用法/</id>
    <published>2018-05-11T08:14:14.230Z</published>
    <updated>2018-05-11T08:14:14.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call的用法"><a href="#call的用法" class="headerlink" title="call的用法"></a>call的用法</h2><ul><li><p>call的作用是将函数绑定到另外一个对象上去运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someFun.call( thisArg，arg1，arg2，… );</span><br></pre></td></tr></table></figure></li><li><p>通俗的解释就是：把someFun函数调用一下，其调用参数分别是arg1、arg2……，并且someFun函数中的this等于thisArg。</p></li><li><p>如果someFun函数不需要参数可以不给arg1，arg2，…参数。</p></li><li><p>这个调用完全等效于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisArg.m = someFun;</span><br><span class="line">thisArg.m(arg1, arg2);</span><br><span class="line"><span class="keyword">delete</span>(thisArg.m);</span><br></pre></td></tr></table></figure></li></ul><h2 id="apply的用法"><a href="#apply的用法" class="headerlink" title="apply的用法"></a>apply的用法</h2><ul><li>apply的作用和call一样，只是调用参数用一个数组表示。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someFun.apply( thisArg, [arg1，arg2，… ] );</span><br></pre></td></tr></table></figure></li></ul><h2 id="this的作用"><a href="#this的作用" class="headerlink" title="this的作用"></a>this的作用</h2><blockquote><p>要理解call和apply的用法，先得理解this的作用。</p></blockquote><ul><li>this表示当前对象。</li><li>可以把this简单的理解为调用者。</li><li><p>为了保证函数的灵活性，我们经常在函数中使用this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Hero的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">n</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = n; <span class="comment">// this代表当前实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个实例</span></span><br><span class="line"><span class="keyword">var</span> lk = <span class="keyword">new</span> Hero(<span class="string">"likang"</span>);</span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> Hero(<span class="string">"dongtao"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(lk.name); <span class="comment">// 输出：likang</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.name); <span class="comment">// 输出：dongtao</span></span><br></pre></td></tr></table></figure></li><li><p>如果一个函数调用没有指明调用者，那么这个调用者就是指当前平台的全局根对象，比如在浏览器上全局根对象是window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"likang"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 输出：likang</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// 这是上一句的完整写法</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="call的使用案例"><a href="#call的使用案例" class="headerlink" title="call的使用案例"></a>call的使用案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span> call与apply的用法 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span> <span class="attr">name</span>=<span class="string">"input text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个全局变量name</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">"global"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义成员变量name</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.name = n; </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lk = <span class="keyword">new</span> Hero(<span class="string">"likang"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个使用了this的测试函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 测试</span></span></span><br><span class="line"><span class="javascript">        fun.call(lk); <span class="comment">// 输出：likang，这时fun函数中的this等于lk。</span></span></span><br><span class="line"><span class="javascript">        fun.call(<span class="built_in">window</span>); <span class="comment">// 输出：global，这时fun函数中的this等于window。</span></span></span><br><span class="line"><span class="javascript">        fun.call(<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>)); <span class="comment">// 输出：input text，这时fun函数中的this等于Dom对象txt。</span></span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;call的用法&quot;&gt;&lt;a href=&quot;#call的用法&quot; class=&quot;headerlink&quot; title=&quot;call的用法&quot;&gt;&lt;/a&gt;call的用法&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;call的作用是将函数绑定到另外一个对象上去运行。&lt;/p&gt;&lt;figure class
      
    
    </summary>
    
      <category term="js" scheme="http://www.JiShuXuePai.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript中的数据类型</title>
    <link href="http://www.JiShuXuePai.com/blog/js/js/javascript%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.JiShuXuePai.com/blog/js/js/javascript中的数据类型/</id>
    <published>2018-05-11T08:14:14.230Z</published>
    <updated>2018-05-11T08:14:14.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typeof能获取的数据类型"><a href="#typeof能获取的数据类型" class="headerlink" title="typeof能获取的数据类型"></a>typeof能获取的数据类型</h2><ul><li>number</li><li>string</li><li>boolean</li><li>object</li><li>function</li><li>undefined</li></ul><h2 id="几种特殊数据"><a href="#几种特殊数据" class="headerlink" title="几种特殊数据"></a>几种特殊数据</h2><h3 id="undefined：未定义类型"><a href="#undefined：未定义类型" class="headerlink" title="undefined：未定义类型"></a>undefined：未定义类型</h3><p>因为JS是一个弱类型语言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">"likang"</span>; <span class="comment">// 数据类型发生了改变</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a; // undefined</span><br><span class="line">a = 1; // number类型</span><br><span class="line">a = &quot;likang&quot;; // string类型</span><br></pre></td></tr></table></figure><p>undefined类型只有一个数值，也叫undefined.</p><p>boolean类型有两个数值, true, false.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = undefined;</span><br></pre></td></tr></table></figure><h3 id="NaN-Not-A-Number"><a href="#NaN-Not-A-Number" class="headerlink" title="NaN : Not A Number"></a>NaN : Not A Number</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;1&quot;/&quot;xx&quot;);</span><br></pre></td></tr></table></figure><p>一定是算数运算才会出现NaN。</p><p>NaN的类型是number。</p><p>NaN 什么也不是，所以说NaN等于什么都是false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(NaN == 1); // false</span><br><span class="line">console.log(NaN == NaN); // false</span><br><span class="line">console.log(NaN == &#123;&#125;); // false</span><br><span class="line"></span><br><span class="line">console.log(NaN != 1); // true</span><br></pre></td></tr></table></figure><h3 id="null：不是一个对象-空对象"><a href="#null：不是一个对象-空对象" class="headerlink" title="null：不是一个对象/空对象"></a>null：不是一个对象/空对象</h3><p>null是object类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = new Object(); // a 是一个对象，有数据，有类型；</span><br><span class="line">var a = &#123;&#125;; // a 是一个对象，有数据，有类型；</span><br><span class="line">var a = &quot;&quot;; // a 是一个空字符串，字符串类型，数据为空。</span><br><span class="line">var a; // undefined类型，没有数据，相当于没有类型；</span><br><span class="line">var a = null; // 没有数据， 有类型；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;typeof能获取的数据类型&quot;&gt;&lt;a href=&quot;#typeof能获取的数据类型&quot; class=&quot;headerlink&quot; title=&quot;typeof能获取的数据类型&quot;&gt;&lt;/a&gt;typeof能获取的数据类型&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;number&lt;/li&gt;&lt;li&gt;st
      
    
    </summary>
    
      <category term="js" scheme="http://www.JiShuXuePai.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>css高级技巧2</title>
    <link href="http://www.JiShuXuePai.com/blog/html/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A72/"/>
    <id>http://www.JiShuXuePai.com/blog/html/css高级技巧2/</id>
    <published>2018-05-11T08:14:14.226Z</published>
    <updated>2018-05-11T08:14:14.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css高级技巧二"><a href="#css高级技巧二" class="headerlink" title="css高级技巧二"></a>css高级技巧二</h1><blockquote><p>平常页面经常看到的一些效果，感觉实现起来很麻烦；其实使用某些技巧会变得容易很多</p></blockquote><h3 id="1-Color-Border-Border-Color"><a href="#1-Color-Border-Border-Color" class="headerlink" title="1.Color + Border = Border-Color"></a>1.Color + Border = <code>Border-Color</code></h3><p>定义了一个元素的文字颜色，这个元素的边框颜色可以省略到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;边框模式&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><img src="a01.png" alt="a01"><img src="a02.png" alt="a01"></p><h3 id="2-文字选中修饰"><a href="#2-文字选中修饰" class="headerlink" title="2.文字选中修饰"></a>2.文字选中修饰</h3><p>修改文字被选中时的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line">*<span class="selector-pseudo">::-moz-selection</span> &#123;    </span><br><span class="line">    <span class="comment">/*Only Firefox still needs a prefix*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="a2.png" alt="a2"></p><h3 id="3-visibility-visible"><a href="#3-visibility-visible" class="headerlink" title="3.visibility: visible"></a>3.visibility: visible</h3><p>可能会认为两个元素都不显示——然而事实上整个父元素都被隐藏了，而子元素不会</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hidden</span> <span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="wrapper hidden"&gt;</span><br><span class="line">     &lt;button class="button" id="button"&gt;子元素不会Hide&lt;/button&gt;</span><br><span class="line">     &lt;p&gt;整个父元素都被隐藏了，而子元素不会&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="a3.png" alt="a3"></p><h3 id="4-position-sticky"><a href="#4-position-sticky" class="headerlink" title="4.position: sticky"></a>4.position: sticky</h3><p>运行效果和<code>fixed</code>相同，但不会挡住任何元素，只有Mozilla和Safari浏览器支持这一属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//支持的浏览器中得到一个sticky属性的元素，而在不支持的浏览器中它将会是一个普通的元素。这在你需要建立一个不可替代的，可以移动的元素的移动端页面的时候非常实用</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;  </span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-不使用图片的菜单图标"><a href="#5-不使用图片的菜单图标" class="headerlink" title="5.不使用图片的菜单图标"></a>5.不使用图片的菜单图标</h3><p><img src="a5.png" alt="a5"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"shadow-icon"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"gradient-icon"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"utf-8"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>☰<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadow-icon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadow-icon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">#000</span>, <span class="number">0</span> <span class="number">18px</span> <span class="number">0</span> <span class="number">#fff</span>, <span class="number">0</span> <span class="number">25px</span> <span class="number">0</span> <span class="number">#000</span>, <span class="number">0</span> <span class="number">37px</span> <span class="number">0</span> <span class="number">#fff</span>, <span class="number">0</span> <span class="number">44px</span> <span class="number">0</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gradient-icon</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to bottom, #000 0%, #000 13%, transparent 13%, transparent 43%, #000 43%, #000 57%, transparent 57%, transparent 85%, #000 85%, #000 98%, transparent 98%);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.utf-8</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-高级CSS计数器"><a href="#6-高级CSS计数器" class="headerlink" title="6.高级CSS计数器"></a>6.高级CSS计数器</h3><p>纯css实现选中个数，CSS中是可以使用计数器的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>AA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>BB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.list &#123;</span><br><span class="line">    counter-reset: i;                  //重置</span><br><span class="line">&#125;</span><br><span class="line">.list &gt; li &#123;</span><br><span class="line">    counter-increment: i;              //计数</span><br><span class="line">&#125;</span><br><span class="line">.list li:after &#123;</span><br><span class="line">    content: "[" counter(i) "]";       //打印结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>案例效果应用实例参考：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"languages"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"c"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"C++"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"C++"</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"C#"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"C#"</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"Java"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"Java"</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"JavaScript"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"JavaScript"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"PHP"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"PHP"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"Python"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"Python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"Ruby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"Ruby"</span>&gt;</span>Ruby<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span>  </span><br><span class="line">  总计:</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.languages</span> &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>: characters;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> &#123;  </span><br><span class="line">  <span class="attribute">counter-increment</span>: characters;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.total</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(characters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="a6.png" alt="a6"></p><h3 id="7-object-fit"><a href="#7-object-fit" class="headerlink" title="7.object-fit"></a>7.object-fit</h3><p><code>object-fit</code>类似<code>background-size</code>,但是稍微有些差异</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//具体有5个值如下</span><br><span class="line"><span class="selector-class">.fill</span> &#123; <span class="attribute">object-fit</span>: fill; &#125;</span><br><span class="line"><span class="selector-class">.contain</span> &#123; <span class="attribute">object-fit</span>: contain; &#125;</span><br><span class="line"><span class="selector-class">.cover</span> &#123; <span class="attribute">object-fit</span>: cover; &#125;</span><br><span class="line"><span class="selector-class">.none</span> &#123; <span class="attribute">object-fit</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.scale-down</span> &#123; <span class="attribute">object-fit</span>: scale-down; &#125;</span><br></pre></td></tr></table></figure><ul><li><code>fill</code>:默认值。填充，可替换元素填满整个内容区域，可能会改变长宽比，导致拉伸</li><li><code>contain</code>:包含，保持原始的尺寸比例，保证可替换元素完整显示，宽度或高度至少有一个和内容区域的宽度或高度一致，部分内容会空白</li><li><code>cover</code>: 覆盖，保持原始的尺寸比例，保证内容区域被填满。因此，可替换元素可能会被切掉一部分，从而不能完整展示</li><li><code>none</code>:保持可替换元素原尺寸和比例</li><li><code>scale-down</code>:等比缩小依次设置了none或contain, 最终呈现的是尺寸比较小的那个</li></ul><img src="/blog/html/css高级技巧2/bVyLvK.jpg"><h3 id="8-currentColor"><a href="#8-currentColor" class="headerlink" title="8.currentColor"></a>8.currentColor</h3><p><em>currentColor是 color 属性的值，具体意思是指：currentColor关键字的使用值是 color 属性值的计算值</em></p><p><code>任意替换性</code>需要使用颜色值的地方，都可以使用<code>currentColor</code>替换，比方说背景色 – <code>background-color</code>, 渐变色 – <code>gradient</code>, 盒阴影 – <code>box-shadow</code>, SVG的填充色 – <code>fill</code>等等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.link &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background-color: currentColor;  /* 控制颜色 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>svg效果举例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*a 标签*/</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#01B19A</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.button</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#117B6F</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#89027B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*svg 标签*/</span></span><br><span class="line"><span class="selector-class">.button</span> <span class="selector-tag">svg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">fill</span>: currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-z-index的过渡"><a href="#9-z-index的过渡" class="headerlink" title="9.z-index的过渡"></a>9.z-index的过渡</h3><p><code>z-index</code>同样支持过渡效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(1,70%,50%,.5);</span><br><span class="line"><span class="attribute">-moz-transition</span>:all <span class="number">3s</span>;</span><br><span class="line"><span class="attribute">-webkit-transition</span>:all <span class="number">3s</span>;</span><br><span class="line"><span class="attribute">transition</span>:all <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">6</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(1,100%,10%,1);</span><br><span class="line"><span class="attribute">-moz-transition</span>:all <span class="number">3s</span>;</span><br><span class="line"><span class="attribute">-webkit-transition</span>:all <span class="number">3s</span>;</span><br><span class="line"><span class="attribute">transition</span>:all <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(50,70%,50%,.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">160px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(120,70%,50%,.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.four</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">320px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(220,70%,50%,.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.five</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">480px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsla</span>(300,70%,50%,.5);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four"</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five"</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="a9.png" alt="a9"></p><h3 id="10-Blend-modes（合成模式）"><a href="#10-Blend-modes（合成模式）" class="headerlink" title="10.Blend modes（合成模式）"></a>10.<strong>Blend modes</strong>（合成模式）</h3><p>在CSS中有16种可用的混合模式。<code>normal</code> (默认的混合模式), <code>multiply</code>, <code>screen</code>, <code>overlay</code>, <code>darken</code>, <code>lighten</code>, <code>color-dodge</code>, <code>color-burn</code>, <code>hard-light</code>, <code>soft-light</code>, <code>difference</code>, <code>exclusion</code>, <code>hue</code>, <code>saturation</code>, <code>color</code> 和 <code>luminosity</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">mix-blend-mode</span>: darken; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>合成背景图层：<code>background-blend-mode</code>属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(image.png);</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">background-blend-mode</span>: screen;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>normal：默认的混合模式，混合色的像素会透过所用的颜色显示出来。</li><li>multiply：正片叠底模式。查看么诶个通道的颜色信息，选择基色或混合色复合。结果的颜色通常都比源或目标的颜色要暗。<strong>任何颜色和黑色相乘都得到黑色，任何颜色和白色相乘都会保留原来的颜色。</strong></li><li>screen：滤色模式。查看每个通道的颜色信息，并将混合色的互补色和技术复合。结果总是较亮的颜色。<strong>任何颜色和白色进行滤色都得到白色，任何颜色和黑色进行滤色都会保留原来的颜色。</strong></li><li>overlay：叠加模式。复合或过滤颜色，取决于基色（backdrop）的值。图像或颜色在现有的像素上叠加，同时保留基色的明暗度。</li><li>darken：变暗模式。查看每个通道的颜色信息，并选择基色或混合色中较暗的颜色作为结果色。比混合色亮的像素被替换，比混合色暗的像素保存不变。</li><li>lighten：变亮模式。选择基色或混合色中较亮的颜色作为结果色。比混合色暗的像素被替换，比混合色亮的像素保存不变。</li><li>color-dodge：颜色减淡模式。查看每个通道中的颜色信息，并通过减小对比度使基色变亮以反映混合色。与黑色混合不发生任何变化。</li><li>color-burn：颜色加深模式。查看每个通道中的颜色信息，并通过增加对比度使基色变暗以及反映混合色。与白色混合不会发生变化。</li><li>hard-light强光模式。符合或过滤颜色，具体取决于混合色。此效果与耀眼的聚光灯照在图像上相似。如果混合色比50%的灰度色亮，则图像变亮。如果混合色比50%的灰度色暗，则图像变暗</li><li>soft-light：柔光模式。使颜色变亮或变暗，具体取决于混合色。此效果与发散的聚光灯照在图像上的效果类似。如果混合色比50%的灰度色亮，则图像变亮，就像被减淡一样。如果混合色比50%的灰度色暗，则图像变暗，就像被加深了一样。</li><li>difference：差值模式。查看每个通道的颜色信息，并从基色中减去混合色，或从混合色中减去基色。具体取决于哪一个颜色的亮度值更大。与白色混合将反转基色值，与黑色混合则不产生变化。</li><li>exclusion：排除模式。插件一种与“差值”模式相似但对比度更低的效果。与白色混合将反转基色值，与黑色混合不发生变化。</li><li>hue：色相模式。“色相”模式只用“混合色”颜色的色相值进行着色，而使饱和度和亮度值保持不变。</li><li>saturation：饱和度模式。“饱和度”模式的作用方式与“色相”模式相似，它只用“混合色”颜色的饱和度值进行着色，而使色相值和亮度值保持不变。</li><li>color：颜色模式。“颜色”模式能够使用“混合色”颜色的饱和度值和色相值同时进行着色，而使“基色”颜色的亮度值保持不变。“颜色”模式模式可以看成是“饱合度”模式和“色相”模式的综合效果。</li><li>luminosity：亮度模式。“亮度”模式能够使用“混合色”颜色的亮度值进行着色，而保持“基色”颜色的饱和度和色相数值不变。其实就是用“基色”中的“色相”和“饱和度”以及“混合色”的亮度创建“结果色”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css高级技巧二&quot;&gt;&lt;a href=&quot;#css高级技巧二&quot; class=&quot;headerlink&quot; title=&quot;css高级技巧二&quot;&gt;&lt;/a&gt;css高级技巧二&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;平常页面经常看到的一些效果，感觉实现起来很麻烦；其实使用某些技巧会变
      
    
    </summary>
    
      <category term="html" scheme="http://www.JiShuXuePai.com/categories/html/"/>
    
    
  </entry>
  
  <entry>
    <title>css高级技巧</title>
    <link href="http://www.JiShuXuePai.com/blog/uncategorized/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.JiShuXuePai.com/blog/uncategorized/css高级技巧/</id>
    <published>2018-05-11T08:14:14.210Z</published>
    <updated>2018-05-11T09:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML与CSS网站开发"><a href="#HTML与CSS网站开发" class="headerlink" title="HTML与CSS网站开发"></a>HTML与CSS网站开发</h1><h1 id="css高级技巧一"><a href="#css高级技巧一" class="headerlink" title="css高级技巧一"></a>css高级技巧一</h1><blockquote><p>平常页面经常看到的一些效果，感觉实现起来很麻烦；其实使用某些技巧会变得容易很多</p></blockquote><h3 id="1-实现黑白图像"><a href="#1-实现黑白图像" class="headerlink" title="1.实现黑白图像"></a>1.实现黑白图像</h3><p>无需ps修改图片，一段代码立即彩色图片显示为黑白图片</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.desaturate</span>&#123;</span><br><span class="line">                <span class="attribute">-webkit-filter</span>:<span class="built_in">grayscale</span>(100%);</span><br><span class="line">                   <span class="attribute">-moz-filter</span>:<span class="built_in">grayscale</span>(100%);</span><br><span class="line">                    <span class="attribute">-ms-filter</span>:<span class="built_in">grayscale</span>(100%);</span><br><span class="line">                     <span class="attribute">-o-filter</span>:<span class="built_in">grayscale</span>(100%);</span><br><span class="line">                        <span class="attribute">filter</span>:<span class="built_in">grayscale</span>(100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">改变前：&lt;img  src="1.jpg"&gt;</span><br><span class="line">改变后：&lt;img  class="desaturate" src="1.jpg"&gt;</span><br></pre></td></tr></table></figure><img src="/blog/uncategorized/css高级技巧/01.png" title="Markdown 语法"><h3 id="2-菜单上应用-取消最后一个元素样式"><a href="#2-菜单上应用-取消最后一个元素样式" class="headerlink" title="2.菜单上应用/取消最后一个元素样式"></a>2.菜单上应用/取消最后一个元素样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  // 默认写法</span></span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;<span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;<span class="attribute">border-right</span>: none;&#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  // 直接使用:not()写法</span></span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span>&#123;<span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-分隔列表"><a href="#3-分隔列表" class="headerlink" title="3.分隔列表"></a>3.分隔列表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul &gt; li:not(:last-child)::after &#123;  content: ";";&#125;    //最后一个列表项使用 :not() 伪类,“;”分格列表</span><br></pre></td></tr></table></figure><p>2,3效果同时展示:<img src="02.png" alt="02"></p><h3 id="4-text-shadow模糊文本"><a href="#4-text-shadow模糊文本" class="headerlink" title="4.text-shadow模糊文本"></a>4.text-shadow模糊文本</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">      <span class="selector-class">.blur</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(255,0,0,.3);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 class="blur"&gt;模糊文本&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><img src="04.png" alt="04"></p><h3 id="5-禁用鼠标事件"><a href="#5-禁用鼠标事件" class="headerlink" title="5.禁用鼠标事件"></a>5.禁用鼠标事件</h3><blockquote><p>CSS3 pointer-events:none的作用可以禁用链接、hover、点击事件</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//CSS3 新增属性</span><br><span class="line"><span class="selector-class">.disabled</span>&#123; <span class="attribute">pointer-event</span>:none;&#125;</span><br><span class="line"></span><br><span class="line">&lt;a style="pointer-events:none;"&gt;禁用&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="6-文本渐变"><a href="#6-文本渐变" class="headerlink" title="6.文本渐变"></a>6.文本渐变</h3><p>利用Css遮罩（CSS Masks）实现</p><blockquote><p>（CSS Masks）可以实现图片遮罩，只需要给一个图片运用一个-webkit-mask-image的css属性。例如：-webkit-mask-image: url(图片.png);从图片遮罩里读出图片的透明度，白色意味着不透明，黑色意味着透明，介于黑白之间的灰色表示半透明。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-attr">[data-text]</span> &#123;   </span></span><br><span class="line"><span class="undefined">position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-attr">[data-text]</span><span class="selector-pseudo">::after</span> &#123;   </span></span><br><span class="line"><span class="undefined">content: attr(data-text);   </span></span><br><span class="line"><span class="undefined">z-index: 10;   </span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#e3e3e3</span>;   </span></span><br><span class="line"><span class="undefined">position: absolute;   </span></span><br><span class="line"><span class="undefined">top: 0;   </span></span><br><span class="line"><span class="undefined">left: 0;   </span></span><br><span class="line"><span class="undefined">-webkit-mask-image: -webkit-gradient(linear, left top, left bottom,      from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">data-text</span>=<span class="string">"文本渐变"</span>&gt;</span>文本渐变<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="06.png" alt="06"></p><h3 id="7-鼠标双击生效"><a href="#7-鼠标双击生效" class="headerlink" title="7.鼠标双击生效"></a>7.鼠标双击生效</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> <span class="selector-tag">span</span> &#123;  </span></span><br><span class="line"><span class="undefined">          position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span> &#123; </span></span><br><span class="line"><span class="undefined">          position: relative; </span></span><br><span class="line"><span class="undefined">          z-index: 2;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.test</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">          z-index: 4;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> <span class="selector-tag">span</span> <span class="selector-tag">input</span> &#123;  </span></span><br><span class="line"><span class="undefined">                background: transparent; </span></span><br><span class="line"><span class="undefined">                border: 0;  </span></span><br><span class="line"><span class="undefined">                cursor: pointer; </span></span><br><span class="line"><span class="undefined">                position: absolute;  </span></span><br><span class="line"><span class="undefined">                top: -1px;  </span></span><br><span class="line"><span class="undefined">                left: 0;  </span></span><br><span class="line"><span class="undefined">                width: 100%;    </span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span><span class="selector-pseudo">:300</span>%;  </span></span><br><span class="line"><span class="undefined">                z-index: 3;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> <span class="selector-tag">span</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;  </span></span><br><span class="line"><span class="undefined">                background: transparent;  </span></span><br><span class="line"><span class="undefined">                border: 0; </span></span><br><span class="line"><span class="undefined">                z-index: 1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">" "</span> <span class="attr">readonly</span>=<span class="string">"true"</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://baidu.com"</span>&gt;</span>双击<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-利用属性选择器让空链接显示"><a href="#8-利用属性选择器让空链接显示" class="headerlink" title="8.利用属性选择器让空链接显示"></a>8.利用属性选择器让空链接显示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://edu.hxsd.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  // a没有内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-attr">[href^="http"]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);&#125;  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="08.png" alt="08"></p><h3 id="9-继承-box-sizing"><a href="#9-继承-box-sizing" class="headerlink" title="9.继承 box-sizing"></a>9.继承 box-sizing</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-优化最佳显示文本"><a href="#10-优化最佳显示文本" class="headerlink" title="10.优化最佳显示文本"></a>10.优化最佳显示文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">      <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;  </span><br><span class="line">      <span class="attribute">-webkit-font-smoothing</span>: antialiased;  </span><br><span class="line">      <span class="attribute">text-rendering</span>: optimizeLegibility;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML与CSS网站开发&quot;&gt;&lt;a href=&quot;#HTML与CSS网站开发&quot; class=&quot;headerlink&quot; title=&quot;HTML与CSS网站开发&quot;&gt;&lt;/a&gt;HTML与CSS网站开发&lt;/h1&gt;&lt;h1 id=&quot;css高级技巧一&quot;&gt;&lt;a href=&quot;#css高级
      
    
    </summary>
    
    
  </entry>
  
</feed>
